package lexer;

/* The following code was generated by JFlex 1.6.1 */

/* JFlex for go example */

import java_cup.runtime.*;

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\7\1\10\1\1\22\0\1\3\1\52\1\45"+
    "\2\0\1\70\1\51\1\0\1\53\1\54\1\5\1\47\1\66\1\50"+
    "\1\71\1\4\1\15\1\36\5\0\1\17\1\0\1\16\1\65\1\67"+
    "\1\56\1\46\1\62\2\0\1\12\4\0\1\20\1\0\1\41\3\0"+
    "\1\22\13\0\1\40\1\0\1\13\1\57\1\101\1\60\1\61\1\14"+
    "\1\0\1\6\1\72\1\27\1\26\1\23\1\21\1\42\1\34\1\30"+
    "\1\0\1\44\1\32\1\31\1\74\1\33\1\43\1\0\1\25\1\75"+
    "\1\24\1\73\1\100\1\76\1\35\1\77\1\11\1\63\1\55\1\64"+
    "\7\0\1\7\u1fa0\0\1\37\1\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\1\1\5\16\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\3\1\1\33\1\34"+
    "\1\35\1\2\1\0\1\36\1\37\21\0\1\40\6\0"+
    "\1\41\1\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\6\0\1\64\1\65\1\66"+
    "\1\67\10\0\1\70\15\0\1\71\2\0\1\72\2\0"+
    "\1\73\1\74\1\75\1\76\4\0\1\77\1\0\1\2"+
    "\6\0\1\100\1\0\1\101\1\102\5\0\1\103\2\0"+
    "\1\104\5\0\1\105\5\0\1\106\1\0\1\106\3\0"+
    "\1\107\2\0\1\110\1\0\1\111\5\0\1\112\6\0"+
    "\1\5\3\0\1\113\2\0\1\114\4\0\1\115\1\4"+
    "\1\116\5\0\1\106\1\117\2\0\1\120\1\121\5\0"+
    "\1\122\6\0\1\123\4\0\1\124\1\125\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\204\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\204\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\204\0\204"+
    "\0\u0738\0\u077a\0\204\0\204\0\u07bc\0\u07fe\0\204\0\204"+
    "\0\u0840\0\204\0\204\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\204\0\u0a0e\0\u0a50\0\u0a92\0\204\0\204\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\204\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u1104\0\204\0\204\0\204\0\204\0\204\0\204\0\204"+
    "\0\u1146\0\204\0\204\0\204\0\204\0\u1188\0\204\0\204"+
    "\0\u11ca\0\204\0\204\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\204\0\204\0\204\0\204\0\u1398\0\u13da\0\u141c"+
    "\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\204\0\u15a8\0\u15ea"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\204\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\204\0\204\0\204\0\204\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\204\0\u1b54\0\u1398\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\204\0\u1d22\0\204\0\204\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\204\0\u1eae\0\u1ef0\0\204\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\204\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\204\0\u2352\0\u2394\0\204\0\u23d6\0\204\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\204\0\u2562\0\u25a4\0\u25e6\0\u018c"+
    "\0\u01ce\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\204\0\u2772"+
    "\0\u27b4\0\204\0\u27f6\0\u2838\0\u287a\0\u28bc\0\204\0\204"+
    "\0\204\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2730\0\204"+
    "\0\u2a48\0\u2a8a\0\204\0\204\0\u2acc\0\u2b0e\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\204\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60"+
    "\0\204\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\204\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u313e\0\u3180\0\u31c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\5"+
    "\1\3\1\11\2\3\1\12\3\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\3\1\26\3\3\1\27\1\30\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\3\1\57\2\3"+
    "\1\60\1\3\1\61\2\3\42\61\1\62\33\61\1\63"+
    "\104\0\1\5\103\0\1\64\1\65\40\0\1\66\101\0"+
    "\1\67\33\0\1\70\2\0\4\70\2\0\71\70\1\71"+
    "\2\0\4\71\2\0\71\71\1\72\2\0\4\72\2\0"+
    "\4\72\1\73\17\72\1\74\2\72\1\74\41\72\6\0"+
    "\1\75\24\0\1\76\37\0\1\77\31\0\1\100\110\0"+
    "\1\101\146\0\1\102\10\0\1\103\14\0\1\104\101\0"+
    "\1\105\64\0\1\106\24\0\1\107\1\110\66\0\1\111"+
    "\7\0\1\112\42\0\1\113\13\0\1\114\122\0\1\115"+
    "\75\0\1\116\115\0\1\117\75\0\1\120\54\0\1\121"+
    "\141\0\1\122\101\0\1\123\1\124\100\0\1\125\1\0"+
    "\1\126\77\0\1\127\2\0\1\130\7\0\1\131\66\0"+
    "\1\132\101\0\1\133\6\0\1\134\72\0\1\125\1\0"+
    "\1\135\5\0\1\136\71\0\1\137\101\0\1\140\13\0"+
    "\1\141\65\0\1\142\101\0\1\143\124\0\1\144\35\0"+
    "\1\145\77\0\1\146\1\147\51\0\1\150\11\0\1\151"+
    "\73\0\1\61\2\0\42\61\1\0\33\61\25\0\1\152"+
    "\1\153\17\0\1\154\26\0\1\155\5\0\1\64\1\4"+
    "\1\5\77\64\5\156\1\157\74\156\1\160\2\0\4\160"+
    "\2\0\71\160\1\161\2\0\4\161\2\0\71\161\1\162"+
    "\2\0\4\162\2\0\71\162\1\163\2\0\4\163\2\0"+
    "\71\163\1\162\2\0\4\162\2\0\30\162\1\164\40\162"+
    "\32\0\1\165\74\0\1\166\150\0\1\167\31\0\1\170"+
    "\152\0\1\171\47\0\1\172\132\0\1\173\31\0\1\174"+
    "\76\0\1\175\5\0\1\176\147\0\1\177\100\0\1\200"+
    "\13\0\1\201\136\0\1\202\62\0\1\203\120\0\1\204"+
    "\62\0\1\205\112\0\1\206\62\0\1\207\107\0\1\210"+
    "\104\0\1\211\120\0\1\212\101\0\1\213\101\0\1\214"+
    "\124\0\1\215\33\0\1\216\110\0\1\217\74\0\1\220"+
    "\104\0\1\221\76\0\1\222\54\0\5\156\1\223\100\156"+
    "\1\224\1\223\74\156\1\225\2\0\4\225\2\0\71\225"+
    "\1\226\2\0\4\226\2\0\71\226\1\227\2\0\4\227"+
    "\2\0\71\227\1\230\2\0\4\230\2\0\71\230\1\227"+
    "\2\0\4\227\2\0\12\227\1\231\56\227\32\0\1\232"+
    "\76\0\1\233\76\0\1\234\100\0\1\235\101\0\1\236"+
    "\120\0\1\237\132\0\1\240\14\0\1\241\14\0\1\242"+
    "\106\0\1\243\74\0\1\244\102\0\1\245\50\0\1\246"+
    "\100\0\1\247\40\0\1\250\71\0\1\251\64\0\1\252"+
    "\107\0\1\253\102\0\1\254\117\0\1\255\112\0\1\256"+
    "\43\0\1\257\116\0\1\260\151\0\1\261\32\0\1\262"+
    "\55\0\4\156\1\5\1\223\74\156\21\0\1\263\100\0"+
    "\1\263\77\0\2\263\62\0\1\264\2\0\4\264\2\0"+
    "\5\264\2\265\62\264\16\0\2\263\15\0\1\266\70\0"+
    "\1\267\100\0\1\270\101\0\1\271\103\0\1\272\147\0"+
    "\1\273\33\0\1\274\105\0\1\205\100\0\1\275\75\0"+
    "\1\276\102\0\1\277\101\0\1\300\106\0\1\206\101\0"+
    "\1\301\47\0\1\302\2\0\4\302\2\0\71\302\6\0"+
    "\1\303\137\0\1\304\64\0\1\305\101\0\1\306\101\0"+
    "\1\307\60\0\1\310\3\0\1\311\2\0\1\312\103\0"+
    "\1\313\70\0\1\310\3\0\1\311\2\0\1\312\1\0"+
    "\1\313\76\0\1\314\121\0\1\315\72\0\1\316\150\0"+
    "\1\317\37\0\1\320\143\0\1\321\31\0\1\322\76\0"+
    "\1\323\110\0\1\324\51\0\1\325\2\0\4\325\2\0"+
    "\71\325\42\0\1\326\63\0\1\327\101\0\1\330\111\0"+
    "\1\331\45\0\1\72\2\0\4\72\2\0\71\72\15\0"+
    "\1\332\112\0\1\333\100\0\1\334\62\0\1\335\3\0"+
    "\1\336\1\0\1\337\111\0\1\340\150\0\1\341\14\0"+
    "\1\342\117\0\1\343\55\0\1\117\2\0\4\117\2\0"+
    "\71\117\23\0\1\344\56\0\1\345\2\0\4\345\2\0"+
    "\71\345\30\0\1\346\104\0\1\347\46\0\1\350\2\0"+
    "\4\350\2\0\71\350\1\351\2\0\4\351\2\0\71\351"+
    "\23\0\1\352\105\0\1\353\52\0\1\354\2\0\4\354"+
    "\2\0\71\354\42\0\1\355\132\0\1\356\6\0\1\357"+
    "\2\0\4\357\2\0\71\357\1\360\2\0\4\360\2\0"+
    "\71\360\23\0\1\361\56\0\1\264\2\0\4\264\2\0"+
    "\71\264\30\0\1\362\113\0\1\363\37\0\1\364\2\0"+
    "\4\364\2\0\71\364\1\365\2\0\4\365\2\0\71\365"+
    "\24\0\1\366\111\0\1\367\56\0\1\337\103\0\1\337"+
    "\74\0\1\370\3\0\1\371\2\0\1\372\64\0\1\373"+
    "\2\0\4\373\2\0\71\373\1\374\2\0\4\374\2\0"+
    "\71\374\1\375\2\0\4\375\2\0\71\375\1\376\2\0"+
    "\4\376\2\0\71\376\1\377\2\0\4\377\2\0\71\377"+
    "\1\u0100\2\0\4\u0100\2\0\71\u0100\1\u0101\2\0\4\u0101"+
    "\2\0\71\u0101\1\u0102\2\0\4\u0102\2\0\71\u0102\1\u0103"+
    "\2\0\4\u0103\2\0\71\u0103\21\0\1\366\100\0\1\366"+
    "\77\0\1\366\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12804];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\23\1\1\11\5\1\2\11"+
    "\2\1\2\11\2\1\2\11\1\1\2\11\6\1\1\11"+
    "\2\1\1\0\2\11\21\0\1\11\6\0\1\1\1\0"+
    "\7\11\1\1\4\11\1\1\2\11\1\1\2\11\6\0"+
    "\4\11\10\0\1\11\15\0\1\11\2\0\1\1\2\0"+
    "\4\11\4\0\1\11\1\0\1\1\6\0\1\11\1\0"+
    "\2\11\5\0\1\11\2\0\1\11\5\0\1\11\5\0"+
    "\1\1\1\0\1\1\3\0\1\11\2\0\1\11\1\0"+
    "\1\11\5\0\1\11\6\0\1\1\3\0\1\11\2\0"+
    "\1\11\4\0\3\11\5\0\1\1\1\11\2\0\2\11"+
    "\5\0\1\11\6\0\1\11\4\0\1\1\1\11\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+ yytext()+">");
            }
          case 86: break;
          case 2: 
            { /* ignore */
            }
          case 87: break;
          case 3: 
            { return symbol(sym.DIV);
            }
          case 88: break;
          case 4: 
            { return symbol(sym.TIME);
            }
          case 89: break;
          case 5: 
            { return symbol(sym.OCTAL_LITERAL);
            }
          case 90: break;
          case 6: 
            { string.setLength(0); yybegin(STRING);
            }
          case 91: break;
          case 7: 
            { return symbol(sym.EQ);
            }
          case 92: break;
          case 8: 
            { return symbol(sym.PLUS);
            }
          case 93: break;
          case 9: 
            { return symbol(sym.MINUS);
            }
          case 94: break;
          case 10: 
            { return symbol(sym.AND);
            }
          case 95: break;
          case 11: 
            { return symbol(sym.NOT);
            }
          case 96: break;
          case 12: 
            { return symbol(sym.RO);
            }
          case 97: break;
          case 13: 
            { return symbol(sym.RC);
            }
          case 98: break;
          case 14: 
            { return symbol(sym.OR);
            }
          case 99: break;
          case 15: 
            { return symbol(sym.AO);
            }
          case 100: break;
          case 16: 
            { return symbol(sym.OS);
            }
          case 101: break;
          case 17: 
            { return symbol(sym.CS);
            }
          case 102: break;
          case 18: 
            { return symbol(sym.CAP);
            }
          case 103: break;
          case 19: 
            { return symbol(sym.AC);
            }
          case 104: break;
          case 20: 
            { return symbol(sym.BRACEO);
            }
          case 105: break;
          case 21: 
            { return symbol(sym.BRACEC);
            }
          case 106: break;
          case 22: 
            { return symbol(sym.TP);
            }
          case 107: break;
          case 23: 
            { return symbol(sym.COMMA);
            }
          case 108: break;
          case 24: 
            { return symbol(sym.SEMICOLON);
            }
          case 109: break;
          case 25: 
            { return symbol(sym.PERC);
            }
          case 110: break;
          case 26: 
            { return symbol(sym.POINT);
            }
          case 111: break;
          case 27: 
            { string.append( yytext() );
            }
          case 112: break;
          case 28: 
            { yybegin(YYINITIAL); 
                                        return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 113: break;
          case 29: 
            { string.append('\\');
            }
          case 114: break;
          case 30: 
            { return symbol(sym.DIVEQ);
            }
          case 115: break;
          case 31: 
            { return symbol(sym.TIMEEQ);
            }
          case 116: break;
          case 32: 
            { return symbol(sym.IF);
            }
          case 117: break;
          case 33: 
            { return symbol(sym.GO);
            }
          case 118: break;
          case 34: 
            { return symbol(sym.EQEQ);
            }
          case 119: break;
          case 35: 
            { return symbol(sym.PLUSEQ);
            }
          case 120: break;
          case 36: 
            { return symbol(sym.PLUSPLUS);
            }
          case 121: break;
          case 37: 
            { return symbol(sym.MINUSEQ);
            }
          case 122: break;
          case 38: 
            { return symbol(sym.MINUSMINUS);
            }
          case 123: break;
          case 39: 
            { return symbol(sym.ANDEQ);
            }
          case 124: break;
          case 40: 
            { return symbol(sym.ANDAND);
            }
          case 125: break;
          case 41: 
            { return symbol(sym.ANDCAP);
            }
          case 126: break;
          case 42: 
            { return symbol(sym.NOTEQ);
            }
          case 127: break;
          case 43: 
            { return symbol(sym.OREQ);
            }
          case 128: break;
          case 44: 
            { return symbol(sym.OROR);
            }
          case 129: break;
          case 45: 
            { return symbol(sym.AOMINUS);
            }
          case 130: break;
          case 46: 
            { return symbol(sym.AOAO);
            }
          case 131: break;
          case 47: 
            { return symbol(sym.CAPEQ);
            }
          case 132: break;
          case 48: 
            { return symbol(sym.AOEQUALS);
            }
          case 133: break;
          case 49: 
            { return symbol(sym.ACAC);
            }
          case 134: break;
          case 50: 
            { return symbol(sym.TPEQ);
            }
          case 135: break;
          case 51: 
            { return symbol(sym.PERCEQ);
            }
          case 136: break;
          case 52: 
            { string.append('\t');
            }
          case 137: break;
          case 53: 
            { string.append('\r');
            }
          case 138: break;
          case 54: 
            { string.append('\"');
            }
          case 139: break;
          case 55: 
            { string.append('\n');
            }
          case 140: break;
          case 56: 
            { return symbol(sym.FOR);
            }
          case 141: break;
          case 57: 
            { return symbol(sym.MAP);
            }
          case 142: break;
          case 58: 
            { return symbol(sym.DECIMAL_LITERAL);
            }
          case 143: break;
          case 59: 
            { return symbol(sym.ANDCAPEQ);
            }
          case 144: break;
          case 60: 
            { return symbol(sym.AOAOEQ);
            }
          case 145: break;
          case 61: 
            { return symbol(sym.ACACEQ);
            }
          case 146: break;
          case 62: 
            { return symbol(sym.POINTPOINTPOINT);
            }
          case 147: break;
          case 63: 
            { return symbol(sym.VAR);
            }
          case 148: break;
          case 64: 
            { return symbol(sym.FUNC);
            }
          case 149: break;
          case 65: 
            { return symbol(sym.ELSE);
            }
          case 150: break;
          case 66: 
            { return symbol(sym.TYPE);
            }
          case 151: break;
          case 67: 
            { return symbol(sym.CASE);
            }
          case 152: break;
          case 68: 
            { return symbol(sym.CHAN);
            }
          case 153: break;
          case 69: 
            { return symbol(sym.GOTO);
            }
          case 154: break;
          case 70: 
            { return symbol(sym.IDENTIFIER);
            }
          case 155: break;
          case 71: 
            { return symbol(sym.RANGE);
            }
          case 156: break;
          case 72: 
            { return symbol(sym.DEFER);
            }
          case 157: break;
          case 73: 
            { return symbol(sym.CONST);
            }
          case 158: break;
          case 74: 
            { return symbol(sym.BREAK);
            }
          case 159: break;
          case 75: 
            { return symbol(sym.RETURN);
            }
          case 160: break;
          case 76: 
            { return symbol(sym.IMPORT);
            }
          case 161: break;
          case 77: 
            { return symbol(sym.SELECT);
            }
          case 162: break;
          case 78: 
            { return symbol(sym.SWITCH);
            }
          case 163: break;
          case 79: 
            { return symbol(sym.DEFAULT);
            }
          case 164: break;
          case 80: 
            { return symbol(sym.INTEGER_LITERAL);
            }
          case 165: break;
          case 81: 
            { return symbol(sym.PACKAGE);
            }
          case 166: break;
          case 82: 
            { return symbol(sym.CONTINUE);
            }
          case 167: break;
          case 83: 
            { return symbol(sym.INTERFACE);
            }
          case 168: break;
          case 84: 
            { return symbol(sym.HEX_LITERAL);
            }
          case 169: break;
          case 85: 
            { return symbol(sym.FALLTHROUGH);
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
