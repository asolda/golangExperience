/* The following code was generated by JFlex 1.6.1 */

/* JFlex for go example */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/luigi/git/compilatori/golangExperience/analizzatore_lessicale/golang.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\56\1\75"+
    "\2\0\1\74\1\55\1\0\1\57\1\60\1\5\1\53\1\72\1\54"+
    "\1\14\1\4\1\12\1\44\1\47\1\46\1\50\1\10\1\45\1\10"+
    "\1\43\1\7\1\71\1\73\1\62\1\52\1\66\2\0\6\11\21\6"+
    "\1\13\2\6\1\63\1\76\1\64\1\65\1\6\1\0\1\17\1\24"+
    "\1\20\1\26\1\23\1\27\1\22\1\37\1\15\1\6\1\21\1\31"+
    "\1\36\1\33\1\35\1\16\1\6\1\25\1\34\1\32\1\30\1\42"+
    "\1\40\1\51\1\41\1\6\1\67\1\61\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\16\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\0\1\37\1\40\1\41\1\0\1\42\1\43"+
    "\2\0\1\44\6\5\1\45\22\5\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\2\0\2\74\1\75\1\76\1\77"+
    "\21\5\1\100\5\5\1\101\1\102\1\103\1\104\1\105"+
    "\1\0\1\2\1\5\1\106\3\0\2\5\1\107\3\5"+
    "\1\110\1\111\1\112\1\5\1\113\2\5\1\114\3\5"+
    "\1\115\1\5\1\116\1\117\5\5\1\120\1\121\1\122"+
    "\3\5\1\123\1\5\1\124\1\125\2\5\1\126\3\5"+
    "\1\127\3\0\5\5\1\130\3\5\1\131\2\5\2\0"+
    "\1\5\1\132\1\133\1\134\1\135\1\136\1\4\1\137"+
    "\1\5\1\140\2\5\1\141\1\5\1\142\1\143\1\144"+
    "\1\5\1\145\2\0\1\5\1\146\1\0\1\147\1\5"+
    "\1\150\1\5\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\176\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\176\0\176"+
    "\0\u0723\0\u0762\0\176\0\176\0\u07a1\0\u07e0\0\176\0\176"+
    "\0\u081f\0\176\0\176\0\u085e\0\176\0\u089d\0\176\0\u08dc"+
    "\0\u091b\0\u095a\0\176\0\u0999\0\176\0\u09d8\0\176\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u017a\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\176\0\176\0\176\0\176"+
    "\0\176\0\176\0\176\0\u10fb\0\176\0\176\0\176\0\176"+
    "\0\u113a\0\176\0\176\0\u1179\0\176\0\176\0\176\0\176"+
    "\0\176\0\176\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u0a56\0\176"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u017a\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u017a\0\u017a\0\176\0\176\0\176\0\u185d\0\u11b8\0\u189c"+
    "\0\176\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u017a\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u017a\0\u017a\0\u017a\0\u1ad3\0\u017a\0\u1b12"+
    "\0\u1b51\0\u017a\0\u1b90\0\u1bcf\0\u1c0e\0\u017a\0\u1c4d\0\u1c8c"+
    "\0\u017a\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\176\0\176"+
    "\0\176\0\u1e06\0\u1e45\0\u1e84\0\u017a\0\u1ec3\0\u017a\0\u017a"+
    "\0\u1f02\0\u1f41\0\u017a\0\u1f80\0\u1fbf\0\u1ffe\0\176\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u017a"+
    "\0\u2235\0\u2274\0\u22b3\0\u017a\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\176\0\176\0\176\0\u017a\0\u017a\0\u017a\0\u017a"+
    "\0\u242d\0\u017a\0\u246c\0\u24ab\0\u017a\0\u24ea\0\176\0\176"+
    "\0\u017a\0\u2529\0\u017a\0\u2568\0\u25a7\0\u25e6\0\u017a\0\u2625"+
    "\0\176\0\u2664\0\176\0\u26a3\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\2\11\1\10"+
    "\1\12\1\10\1\13\1\14\1\15\1\10\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\10"+
    "\1\26\1\10\1\27\1\10\1\30\3\10\1\31\6\11"+
    "\1\10\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\3\1\56\2\3"+
    "\72\56\1\57\1\60\101\0\1\5\100\0\1\61\1\62"+
    "\44\0\1\63\32\0\1\64\2\0\1\64\1\0\1\64"+
    "\1\0\26\64\6\0\1\64\1\65\32\0\1\10\2\0"+
    "\1\10\1\0\1\10\1\0\26\10\6\0\1\10\34\0"+
    "\2\11\1\0\1\11\1\0\1\66\1\67\25\0\6\11"+
    "\36\0\1\70\1\0\1\70\1\71\1\66\1\67\26\0"+
    "\5\70\1\71\41\0\1\72\70\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\12\10\1\73\3\10\1\74\2\10"+
    "\1\75\4\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\76\23\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\77\15\10\1\100\1\10\1\101\3\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\20\10"+
    "\1\102\5\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\103\11\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\10\10"+
    "\1\104\13\10\1\105\1\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\2\10\1\106\3\10"+
    "\1\107\4\10\1\110\12\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\6\10\1\111\17\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\112\10\10\1\113\1\114\3\10\1\115"+
    "\5\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\1\116\25\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\24\10\1\117\1\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\6\10\1\120\6\10\1\121\5\10\1\122\2\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\123\23\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\2\10\1\124\23\10"+
    "\6\0\1\10\77\0\1\125\76\0\1\126\1\127\75\0"+
    "\1\130\1\0\1\131\74\0\1\132\2\0\1\133\7\0"+
    "\1\134\63\0\1\135\76\0\1\136\6\0\1\137\67\0"+
    "\1\130\1\0\1\140\5\0\1\141\66\0\1\142\76\0"+
    "\1\143\13\0\1\144\62\0\1\145\76\0\1\146\24\0"+
    "\1\56\2\0\72\56\27\0\1\147\4\0\1\150\1\151"+
    "\41\0\1\152\1\0\1\61\1\4\1\5\74\61\5\153"+
    "\1\154\71\153\6\0\1\64\2\0\1\64\1\0\1\64"+
    "\1\0\26\64\6\0\1\64\34\0\2\155\1\0\1\156"+
    "\30\0\6\155\36\0\1\70\1\0\1\70\31\0\5\70"+
    "\35\0\4\157\4\0\2\157\2\0\2\157\1\0\2\157"+
    "\13\0\6\157\42\0\1\160\70\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\161\10\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\162\24\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\163\22\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\17\10"+
    "\1\164\6\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\16\10\1\165\2\10\1\166\4\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\167\23\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\15\10\1\170\10\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\17\10\1\171\6\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\6\10\1\172\17\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\15\10\1\173\10\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\16\10\1\174\7\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\15\10\1\175\10\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\16\10\1\176\7\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\12\10\1\177\13\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\14\10\1\200\11\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\16\10\1\201\7\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\20\10\1\202\5\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\203\15\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\16\10\1\204\7\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\205\24\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\14\10\1\206\11\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\207\15\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\1\210\25\10\6\0"+
    "\1\10\33\0\1\10\2\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\211\24\10\6\0\1\10\33\0\1\10\2\0"+
    "\1\10\1\0\1\10\1\0\10\10\1\212\15\10\6\0"+
    "\1\10\77\0\1\213\76\0\1\214\76\0\1\215\24\0"+
    "\5\153\1\216\75\153\1\217\1\216\71\153\7\0\2\155"+
    "\1\0\1\155\2\0\1\67\25\0\6\155\43\0\1\67"+
    "\67\0\1\10\2\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\220\17\10\1\221\1\222\1\223\1\224\2\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\20\10"+
    "\1\225\5\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\4\10\1\226\21\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\227\17\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\15\10\1\230\1\10\1\231\6\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\232\24\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\16\10\1\233\7\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\20\10\1\234\5\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\6\10\1\235\17\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\236\23\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\6\10\1\237\17\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\5\10\1\240\20\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\13\10\1\241\12\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\6\10\1\242\17\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\2\10\1\243\3\10"+
    "\1\244\17\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\14\10\1\245\11\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\246\22\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\247\23\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\15\10"+
    "\1\250\10\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\251\17\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\6\10"+
    "\1\252\17\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\1\253\12\10\1\254\12\10\6\0"+
    "\1\10\33\0\1\10\2\0\1\10\1\0\1\10\1\0"+
    "\15\10\1\255\10\10\6\0\1\10\25\0\4\153\1\5"+
    "\1\216\71\153\6\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\10\10\1\256\15\10\6\0\1\10\72\0\1\257"+
    "\101\0\1\260\75\0\1\261\35\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\262\15\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\2\10"+
    "\1\263\23\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\1\264\25\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\15\10\1\265"+
    "\10\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\14\10\1\266\11\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\4\10\1\267"+
    "\21\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\6\10\1\270\17\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\10\10\1\271"+
    "\15\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\13\10\1\272\12\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\10\10\1\273"+
    "\15\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\15\10\1\274\10\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\15\10\1\275"+
    "\10\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\276\24\10\1\277\1\300\1\301"+
    "\1\302\2\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\303\22\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\16\10\1\304"+
    "\7\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\305\22\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\3\10\1\306"+
    "\22\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\12\10\1\307\13\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\15\10\1\310"+
    "\10\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\1\311\20\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\16\10\1\312"+
    "\7\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\6\10\1\313\17\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\16\10\1\314"+
    "\7\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\14\10\1\315\11\10\6\0\1\10\33\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\22\10\1\316"+
    "\3\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\26\10\2\0\1\317\1\320\2\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\15\10"+
    "\1\321\10\10\6\0\1\10\72\0\1\322\101\0\1\323"+
    "\75\0\1\324\35\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\15\10\1\325\10\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\1\326\20\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\15\10\1\327\10\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\22\10\1\330\3\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\2\10\1\331\23\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\6\10\1\332\17\10"+
    "\6\0\1\10\33\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\13\10\1\333\12\10\6\0\1\10\33\0\1\10"+
    "\2\0\1\10\1\0\1\10\1\0\26\10\6\0\1\334"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\15\10"+
    "\1\335\10\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\336\15\10\6\0\1\10"+
    "\75\0\1\337\75\0\1\340\35\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\10\10\1\341\15\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\342\22\10\6\0\1\10\33\0\1\10\2\0\1\10"+
    "\1\0\1\10\1\0\6\10\1\343\17\10\6\0\1\10"+
    "\33\0\1\10\2\0\1\10\1\0\1\10\1\0\26\10"+
    "\1\0\1\344\1\345\3\0\1\10\33\0\1\10\2\0"+
    "\1\10\1\0\1\10\1\0\20\10\1\346\5\10\6\0"+
    "\1\10\33\0\1\10\2\0\1\10\1\0\1\10\1\0"+
    "\6\10\1\347\17\10\6\0\1\10\74\0\1\350\77\0"+
    "\1\351\34\0\1\10\2\0\1\10\1\0\1\10\1\0"+
    "\13\10\1\352\12\10\6\0\1\10\70\0\1\353\41\0"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\5\10\1\354"+
    "\20\10\6\0\1\10\33\0\1\10\2\0\1\10\1\0"+
    "\1\10\1\0\22\10\1\355\3\10\6\0\1\10\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9954];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\31\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\0\1\11\1\1\1\11\1\0\1\11\1\1"+
    "\2\0\32\1\7\11\1\1\4\11\1\1\2\11\1\1"+
    "\6\11\2\0\3\1\1\11\32\1\3\11\1\0\2\1"+
    "\1\11\3\0\32\1\3\11\15\1\1\11\3\0\14\1"+
    "\2\0\1\1\3\11\12\1\2\11\3\1\2\0\2\1"+
    "\1\0\1\11\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { throw new Error(\"Illegal character <\"+ yytext()+\">\"); }");
            { throw new Error("Illegal character <"+ yytext()+">");
            }
          case 106: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { /* ignore */ }");
            { /* ignore */
            }
          case 107: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return symbol(sym.DIV); }");
            { return symbol(sym.DIV);
            }
          case 108: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return symbol(sym.TIME); }");
            { return symbol(sym.TIME);
            }
          case 109: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return symbol(sym.IDENTIFIER); }");
            { return symbol(sym.IDENTIFIER);
            }
          case 110: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { return symbol(sym.DECIMAL_LITERAL); }");
            { return symbol(sym.DECIMAL_LITERAL);
            }
          case 111: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return symbol(sym.POINT); }");
            { return symbol(sym.POINT);
            }
          case 112: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return symbol(sym.EQ); }");
            { return symbol(sym.EQ);
            }
          case 113: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return symbol(sym.PLUS); }");
            { return symbol(sym.PLUS);
            }
          case 114: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return symbol(sym.MINUS); }");
            { return symbol(sym.MINUS);
            }
          case 115: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return symbol(sym.AND); }");
            { return symbol(sym.AND);
            }
          case 116: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { return symbol(sym.NOT); }");
            { return symbol(sym.NOT);
            }
          case 117: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return symbol(sym.RO); }");
            { return symbol(sym.RO);
            }
          case 118: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return symbol(sym.RC); }");
            { return symbol(sym.RC);
            }
          case 119: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return symbol(sym.OR); }");
            { return symbol(sym.OR);
            }
          case 120: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return symbol(sym.AO); }");
            { return symbol(sym.AO);
            }
          case 121: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return symbol(sym.OS); }");
            { return symbol(sym.OS);
            }
          case 122: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return symbol(sym.CS); }");
            { return symbol(sym.CS);
            }
          case 123: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return symbol(sym.CAP); }");
            { return symbol(sym.CAP);
            }
          case 124: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return symbol(sym.AC); }");
            { return symbol(sym.AC);
            }
          case 125: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return symbol(sym.BRACEO); }");
            { return symbol(sym.BRACEO);
            }
          case 126: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return symbol(sym.BRACEC); }");
            { return symbol(sym.BRACEC);
            }
          case 127: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return symbol(sym.TP); }");
            { return symbol(sym.TP);
            }
          case 128: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return symbol(sym.COMMA); }");
            { return symbol(sym.COMMA);
            }
          case 129: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return symbol(sym.SEMICOLON); }");
            { return symbol(sym.SEMICOLON);
            }
          case 130: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return symbol(sym.PERC); }");
            { return symbol(sym.PERC);
            }
          case 131: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { string.setLength(0); yybegin(STRING); }");
            { string.setLength(0); yybegin(STRING);
            }
          case 132: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { string.append( yytext() ); }");
            { string.append( yytext() );
            }
          case 133: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { yybegin(YYINITIAL); "+ZZ_NL+"                                        return symbol(sym.STRING_LITERAL, string.toString()); }");
            { yybegin(YYINITIAL); 
                                        return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 134: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { string.append(\'\\\\\'); }");
            { string.append('\\');
            }
          case 135: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return symbol(sym.DIVEQ); }");
            { return symbol(sym.DIVEQ);
            }
          case 136: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return symbol(sym.POINTER); }");
            { return symbol(sym.POINTER);
            }
          case 137: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return symbol(sym.TIMEEQ); }");
            { return symbol(sym.TIMEEQ);
            }
          case 138: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return symbol(sym.IMAGINARY_LITERAL); }");
            { return symbol(sym.IMAGINARY_LITERAL);
            }
          case 139: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return symbol(sym.OCTAL_LITERAL); }");
            { return symbol(sym.OCTAL_LITERAL);
            }
          case 140: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return symbol(sym.IF); }");
            { return symbol(sym.IF);
            }
          case 141: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return symbol(sym.GO); }");
            { return symbol(sym.GO);
            }
          case 142: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return symbol(sym.EQEQ); }");
            { return symbol(sym.EQEQ);
            }
          case 143: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return symbol(sym.PLUSEQ); }");
            { return symbol(sym.PLUSEQ);
            }
          case 144: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.PLUSPLUS); }");
            { return symbol(sym.PLUSPLUS);
            }
          case 145: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return symbol(sym.MINUSEQ); }");
            { return symbol(sym.MINUSEQ);
            }
          case 146: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { return symbol(sym.MINUSMINUS); }");
            { return symbol(sym.MINUSMINUS);
            }
          case 147: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return symbol(sym.ANDEQ); }");
            { return symbol(sym.ANDEQ);
            }
          case 148: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return symbol(sym.ANDAND); }");
            { return symbol(sym.ANDAND);
            }
          case 149: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return symbol(sym.ANDCAP); }");
            { return symbol(sym.ANDCAP);
            }
          case 150: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return symbol(sym.NOTEQ); }");
            { return symbol(sym.NOTEQ);
            }
          case 151: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return symbol(sym.OREQ); }");
            { return symbol(sym.OREQ);
            }
          case 152: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return symbol(sym.OROR); }");
            { return symbol(sym.OROR);
            }
          case 153: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return symbol(sym.AOMINUS); }");
            { return symbol(sym.AOMINUS);
            }
          case 154: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return symbol(sym.AOAO); }");
            { return symbol(sym.AOAO);
            }
          case 155: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return symbol(sym.CAPEQ); }");
            { return symbol(sym.CAPEQ);
            }
          case 156: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return symbol(sym.AOEQUALS); }");
            { return symbol(sym.AOEQUALS);
            }
          case 157: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return symbol(sym.ACAC); }");
            { return symbol(sym.ACAC);
            }
          case 158: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return symbol(sym.TPEQ); }");
            { return symbol(sym.TPEQ);
            }
          case 159: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return symbol(sym.PERCEQ); }");
            { return symbol(sym.PERCEQ);
            }
          case 160: break;
          case 56: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { string.append(\'\\r\'); }");
            { string.append('\r');
            }
          case 161: break;
          case 57: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { string.append(\'\\t\'); }");
            { string.append('\t');
            }
          case 162: break;
          case 58: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { string.append(\'\\n\'); }");
            { string.append('\n');
            }
          case 163: break;
          case 59: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { string.append(\'\\\"\'); }");
            { string.append('\"');
            }
          case 164: break;
          case 60: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return symbol(sym.FLOAT_LITERAL); }");
            { return symbol(sym.FLOAT_LITERAL);
            }
          case 165: break;
          case 61: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return symbol(sym.HEX_LITERAL); }");
            { return symbol(sym.HEX_LITERAL);
            }
          case 166: break;
          case 62: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return symbol(sym.POINTPOINTPOINT); }");
            { return symbol(sym.POINTPOINTPOINT);
            }
          case 167: break;
          case 63: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return symbol(sym.INT); }");
            { return symbol(sym.INT);
            }
          case 168: break;
          case 64: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return symbol(sym.FOR); }");
            { return symbol(sym.FOR);
            }
          case 169: break;
          case 65: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return symbol(sym.MAP); }");
            { return symbol(sym.MAP);
            }
          case 170: break;
          case 66: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return symbol(sym.VAR); }");
            { return symbol(sym.VAR);
            }
          case 171: break;
          case 67: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return symbol(sym.ANDCAPEQ); }");
            { return symbol(sym.ANDCAPEQ);
            }
          case 172: break;
          case 68: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return symbol(sym.AOAOEQ); }");
            { return symbol(sym.AOAOEQ);
            }
          case 173: break;
          case 69: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return symbol(sym.ACACEQ); }");
            { return symbol(sym.ACACEQ);
            }
          case 174: break;
          case 70: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return symbol(sym.INT8); }");
            { return symbol(sym.INT8);
            }
          case 175: break;
          case 71: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return symbol(sym.CASE); }");
            { return symbol(sym.CASE);
            }
          case 176: break;
          case 72: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return symbol(sym.CHAN); }");
            { return symbol(sym.CHAN);
            }
          case 177: break;
          case 73: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return symbol(sym.GOTO); }");
            { return symbol(sym.GOTO);
            }
          case 178: break;
          case 74: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            }
          case 179: break;
          case 75: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return symbol(sym.BYTE); }");
            { return symbol(sym.BYTE);
            }
          case 180: break;
          case 76: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return symbol(sym.RUNE); }");
            { return symbol(sym.RUNE);
            }
          case 181: break;
          case 77: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return symbol(sym.FUNC); }");
            { return symbol(sym.FUNC);
            }
          case 182: break;
          case 78: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return symbol(sym.UINT); }");
            { return symbol(sym.UINT);
            }
          case 183: break;
          case 79: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return symbol(sym.TYPE); }");
            { return symbol(sym.TYPE);
            }
          case 184: break;
          case 80: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return symbol(sym.INT16); }");
            { return symbol(sym.INT16);
            }
          case 185: break;
          case 81: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return symbol(sym.INT64); }");
            { return symbol(sym.INT64);
            }
          case 186: break;
          case 82: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return symbol(sym.INT32); }");
            { return symbol(sym.INT32);
            }
          case 187: break;
          case 83: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return symbol(sym.CONST); }");
            { return symbol(sym.CONST);
            }
          case 188: break;
          case 84: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return symbol(sym.BREAK); }");
            { return symbol(sym.BREAK);
            }
          case 189: break;
          case 85: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return symbol(sym.RANGE); }");
            { return symbol(sym.RANGE);
            }
          case 190: break;
          case 86: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return symbol(sym.DEFER); }");
            { return symbol(sym.DEFER);
            }
          case 191: break;
          case 87: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return symbol(sym.UINT8); }");
            { return symbol(sym.UINT8);
            }
          case 192: break;
          case 88: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return symbol(sym.IMPORT); }");
            { return symbol(sym.IMPORT);
            }
          case 193: break;
          case 89: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return symbol(sym.RETURN); }");
            { return symbol(sym.RETURN);
            }
          case 194: break;
          case 90: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return symbol(sym.UINT16); }");
            { return symbol(sym.UINT16);
            }
          case 195: break;
          case 91: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return symbol(sym.UINT64); }");
            { return symbol(sym.UINT64);
            }
          case 196: break;
          case 92: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return symbol(sym.UINT32); }");
            { return symbol(sym.UINT32);
            }
          case 197: break;
          case 93: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return symbol(sym.SELECT); }");
            { return symbol(sym.SELECT);
            }
          case 198: break;
          case 94: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return symbol(sym.STRING); }");
            { return symbol(sym.STRING);
            }
          case 199: break;
          case 95: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return symbol(sym.SWITCH); }");
            { return symbol(sym.SWITCH);
            }
          case 200: break;
          case 96: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return symbol(sym.PACKAGE); }");
            { return symbol(sym.PACKAGE);
            }
          case 201: break;
          case 97: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return symbol(sym.DEFAULT); }");
            { return symbol(sym.DEFAULT);
            }
          case 202: break;
          case 98: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return symbol(sym.FLOAT64); }");
            { return symbol(sym.FLOAT64);
            }
          case 203: break;
          case 99: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return symbol(sym.FLOAT32); }");
            { return symbol(sym.FLOAT32);
            }
          case 204: break;
          case 100: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return symbol(sym.UINTPTR); }");
            { return symbol(sym.UINTPTR);
            }
          case 205: break;
          case 101: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return symbol(sym.CONTINUE); }");
            { return symbol(sym.CONTINUE);
            }
          case 206: break;
          case 102: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return symbol(sym.INTERFACE); }");
            { return symbol(sym.INTERFACE);
            }
          case 207: break;
          case 103: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return symbol(sym.COMPLEX64); }");
            { return symbol(sym.COMPLEX64);
            }
          case 208: break;
          case 104: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return symbol(sym.COMPLEX128); }");
            { return symbol(sym.COMPLEX128);
            }
          case 209: break;
          case 105: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return symbol(sym.FALLTHROUGH); }");
            { return symbol(sym.FALLTHROUGH);
            }
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
