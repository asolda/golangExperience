/* The following code was generated by JFlex 1.6.1 */

/* JFlex for go example */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/luigi/git/compilatori/golangExperience/analizzatore_lessicale/golang.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\7\1\10\1\1\22\0\1\3\1\0\1\45"+
    "\7\0\1\5\1\47\1\0\1\50\1\0\1\4\1\15\1\36\5\0"+
    "\1\17\1\0\1\16\3\0\1\46\3\0\1\12\4\0\1\20\1\0"+
    "\1\41\3\0\1\22\13\0\1\40\1\0\1\13\1\0\1\60\2\0"+
    "\1\14\1\0\1\6\1\51\1\27\1\26\1\23\1\21\1\42\1\34"+
    "\1\30\1\0\1\44\1\32\1\31\1\53\1\33\1\43\1\0\1\25"+
    "\1\54\1\24\1\52\1\57\1\55\1\35\1\56\1\11\12\0\1\7"+
    "\u1fa0\0\1\37\1\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\2\1\1\4\16\1"+
    "\1\5\1\6\1\7\1\10\3\1\1\11\1\12\1\13"+
    "\1\2\22\0\1\14\6\0\1\15\1\0\1\16\5\0"+
    "\1\17\1\20\1\21\1\22\10\0\1\23\15\0\1\24"+
    "\2\0\1\25\6\0\1\26\1\0\1\2\6\0\1\27"+
    "\1\0\1\30\1\31\5\0\1\32\2\0\1\33\5\0"+
    "\1\34\5\0\1\35\1\0\1\35\3\0\1\36\2\0"+
    "\1\37\1\0\1\40\5\0\1\41\6\0\1\4\3\0"+
    "\1\42\2\0\1\43\4\0\1\44\1\45\5\0\1\35"+
    "\1\46\2\0\1\47\1\50\5\0\1\51\6\0\1\52"+
    "\4\0\1\53\1\54\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\304\0\142\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\142\0\u0436\0\142\0\142\0\u0467\0\u0498\0\u04c9\0\u04fa"+
    "\0\142\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\142\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\142\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\142\0\142\0\142\0\142"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\142\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\142\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\142\0\u113a\0\u0b7c\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\142\0\u1291\0\142\0\142\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\142\0\u13b7\0\u13e8\0\142\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\142\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\142"+
    "\0\u1729\0\u175a\0\142\0\u178b\0\142\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\142\0\u18b1\0\u18e2\0\u1913\0\365\0\u0126"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\142\0\u1a39\0\u1a6a"+
    "\0\142\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\142\0\142\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1a08\0\142\0\u1c54\0\u1c85"+
    "\0\142\0\142\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\142"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\142\0\u1ed1"+
    "\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\142\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0"+
    "\0\u21e1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\5"+
    "\1\3\1\11\2\3\1\12\3\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\3\1\26\3\3\1\27\1\30\1\3\1\31"+
    "\1\32\1\33\1\34\1\35\2\3\1\36\2\3\1\37"+
    "\1\3\1\40\2\3\42\40\1\41\12\40\1\42\63\0"+
    "\1\5\62\0\1\43\1\44\53\0\1\45\2\0\4\45"+
    "\2\0\50\45\1\46\2\0\4\46\2\0\50\46\1\47"+
    "\2\0\4\47\2\0\4\47\1\50\17\47\1\51\2\47"+
    "\1\51\20\47\6\0\1\52\24\0\1\53\16\0\1\54"+
    "\31\0\1\55\67\0\1\56\104\0\1\57\10\0\1\60"+
    "\14\0\1\61\60\0\1\62\43\0\1\63\24\0\1\64"+
    "\1\65\45\0\1\66\7\0\1\67\21\0\1\70\13\0"+
    "\1\71\101\0\1\72\54\0\1\73\74\0\1\74\54\0"+
    "\1\75\33\0\1\76\120\0\1\77\37\0\1\100\56\0"+
    "\1\101\1\102\30\0\1\103\11\0\1\104\52\0\1\40"+
    "\2\0\42\40\1\0\12\40\25\0\1\105\1\106\17\0"+
    "\1\107\5\0\1\110\5\0\1\43\1\4\1\5\56\43"+
    "\5\111\1\112\53\111\1\113\2\0\4\113\2\0\50\113"+
    "\1\114\2\0\4\114\2\0\50\114\1\115\2\0\4\115"+
    "\2\0\50\115\1\116\2\0\4\116\2\0\50\116\1\115"+
    "\2\0\4\115\2\0\30\115\1\117\17\115\32\0\1\120"+
    "\53\0\1\121\106\0\1\122\31\0\1\123\110\0\1\124"+
    "\47\0\1\125\70\0\1\126\31\0\1\127\55\0\1\130"+
    "\5\0\1\131\105\0\1\132\57\0\1\133\13\0\1\134"+
    "\115\0\1\135\41\0\1\136\77\0\1\137\41\0\1\140"+
    "\71\0\1\141\41\0\1\142\66\0\1\143\63\0\1\144"+
    "\54\0\1\145\67\0\1\146\53\0\1\147\63\0\1\150"+
    "\55\0\1\151\33\0\5\111\1\152\57\111\1\153\1\152"+
    "\53\111\1\154\2\0\4\154\2\0\50\154\1\155\2\0"+
    "\4\155\2\0\50\155\1\156\2\0\4\156\2\0\50\156"+
    "\1\157\2\0\4\157\2\0\50\157\1\156\2\0\4\156"+
    "\2\0\12\156\1\160\35\156\32\0\1\161\55\0\1\162"+
    "\55\0\1\163\57\0\1\164\60\0\1\165\77\0\1\166"+
    "\70\0\1\167\14\0\1\170\14\0\1\171\65\0\1\172"+
    "\53\0\1\173\61\0\1\174\27\0\1\175\57\0\1\176"+
    "\40\0\1\177\50\0\1\200\43\0\1\201\66\0\1\202"+
    "\61\0\1\203\76\0\1\204\71\0\1\205\22\0\1\206"+
    "\75\0\1\207\107\0\1\210\32\0\1\211\34\0\4\111"+
    "\1\5\1\152\53\111\21\0\1\212\57\0\1\212\56\0"+
    "\2\212\41\0\1\213\2\0\4\213\2\0\5\213\2\214"+
    "\41\213\16\0\2\212\15\0\1\215\47\0\1\216\57\0"+
    "\1\217\60\0\1\220\62\0\1\221\105\0\1\222\33\0"+
    "\1\223\64\0\1\140\57\0\1\224\54\0\1\225\61\0"+
    "\1\226\60\0\1\227\65\0\1\141\60\0\1\230\26\0"+
    "\1\231\2\0\4\231\2\0\50\231\6\0\1\232\116\0"+
    "\1\233\43\0\1\234\60\0\1\235\60\0\1\236\37\0"+
    "\1\237\3\0\1\240\2\0\1\241\62\0\1\242\47\0"+
    "\1\237\3\0\1\240\2\0\1\241\1\0\1\242\55\0"+
    "\1\243\100\0\1\244\51\0\1\245\106\0\1\246\37\0"+
    "\1\247\101\0\1\250\31\0\1\251\55\0\1\252\67\0"+
    "\1\253\30\0\1\254\2\0\4\254\2\0\50\254\42\0"+
    "\1\255\42\0\1\256\60\0\1\7\70\0\1\257\24\0"+
    "\1\47\2\0\4\47\2\0\50\47\15\0\1\260\71\0"+
    "\1\261\57\0\1\262\41\0\1\263\3\0\1\264\1\0"+
    "\1\265\70\0\1\266\106\0\1\267\14\0\1\270\76\0"+
    "\1\271\34\0\1\74\2\0\4\74\2\0\50\74\23\0"+
    "\1\272\35\0\1\273\2\0\4\273\2\0\50\273\30\0"+
    "\1\274\63\0\1\275\25\0\1\276\2\0\4\276\2\0"+
    "\50\276\1\277\2\0\4\277\2\0\50\277\23\0\1\300"+
    "\64\0\1\301\31\0\1\302\2\0\4\302\2\0\50\302"+
    "\42\0\1\303\70\0\1\304\6\0\1\305\2\0\4\305"+
    "\2\0\50\305\1\306\2\0\4\306\2\0\50\306\23\0"+
    "\1\307\35\0\1\213\2\0\4\213\2\0\50\213\30\0"+
    "\1\310\72\0\1\311\16\0\1\312\2\0\4\312\2\0"+
    "\50\312\1\313\2\0\4\313\2\0\50\313\24\0\1\314"+
    "\70\0\1\315\35\0\1\265\62\0\1\265\53\0\1\316"+
    "\3\0\1\317\2\0\1\320\43\0\1\321\2\0\4\321"+
    "\2\0\50\321\1\322\2\0\4\322\2\0\50\322\1\323"+
    "\2\0\4\323\2\0\50\323\1\324\2\0\4\324\2\0"+
    "\50\324\1\325\2\0\4\325\2\0\50\325\1\326\2\0"+
    "\4\326\2\0\50\326\1\327\2\0\4\327\2\0\50\327"+
    "\1\330\2\0\4\330\2\0\50\330\1\331\2\0\4\331"+
    "\2\0\50\331\21\0\1\314\57\0\1\314\56\0\1\314"+
    "\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\21\1\1\11"+
    "\1\1\2\11\4\1\1\11\2\1\22\0\1\11\6\0"+
    "\1\1\1\0\1\11\5\0\4\11\10\0\1\11\15\0"+
    "\1\11\2\0\1\1\6\0\1\11\1\0\1\1\6\0"+
    "\1\11\1\0\2\11\5\0\1\11\2\0\1\11\5\0"+
    "\1\11\5\0\1\1\1\0\1\1\3\0\1\11\2\0"+
    "\1\11\1\0\1\11\5\0\1\11\6\0\1\1\3\0"+
    "\1\11\2\0\1\11\4\0\2\11\5\0\1\1\1\11"+
    "\2\0\2\11\5\0\1\11\6\0\1\11\4\0\1\1"+
    "\1\11\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+ yytext()+">");
            }
          case 45: break;
          case 2: 
            { /* ignore */
            }
          case 46: break;
          case 3: 
            { return symbol(sym.TIME);
            }
          case 47: break;
          case 4: 
            { return symbol(sym.OCTAL_LITERAL);
            }
          case 48: break;
          case 5: 
            { string.setLength(0); yybegin(STRING);
            }
          case 49: break;
          case 6: 
            { return symbol(sym.EQ);
            }
          case 50: break;
          case 7: 
            { return symbol(sym.PLUS);
            }
          case 51: break;
          case 8: 
            { return symbol(sym.MINUS);
            }
          case 52: break;
          case 9: 
            { string.append( yytext() );
            }
          case 53: break;
          case 10: 
            { yybegin(YYINITIAL); 
                                        return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 54: break;
          case 11: 
            { string.append('\\');
            }
          case 55: break;
          case 12: 
            { return symbol(sym.IF);
            }
          case 56: break;
          case 13: 
            { return symbol(sym.GO);
            }
          case 57: break;
          case 14: 
            { return symbol(sym.EQEQ);
            }
          case 58: break;
          case 15: 
            { string.append('\t');
            }
          case 59: break;
          case 16: 
            { string.append('\r');
            }
          case 60: break;
          case 17: 
            { string.append('\"');
            }
          case 61: break;
          case 18: 
            { string.append('\n');
            }
          case 62: break;
          case 19: 
            { return symbol(sym.FOR);
            }
          case 63: break;
          case 20: 
            { return symbol(sym.MAP);
            }
          case 64: break;
          case 21: 
            { return symbol(sym.DECIMAL_LITERAL);
            }
          case 65: break;
          case 22: 
            { return symbol(sym.VAR);
            }
          case 66: break;
          case 23: 
            { return symbol(sym.FUNC);
            }
          case 67: break;
          case 24: 
            { return symbol(sym.ELSE);
            }
          case 68: break;
          case 25: 
            { return symbol(sym.TYPE);
            }
          case 69: break;
          case 26: 
            { return symbol(sym.CASE);
            }
          case 70: break;
          case 27: 
            { return symbol(sym.CHAN);
            }
          case 71: break;
          case 28: 
            { return symbol(sym.GOTO);
            }
          case 72: break;
          case 29: 
            { return symbol(sym.IDENTIFIER);
            }
          case 73: break;
          case 30: 
            { return symbol(sym.RANGE);
            }
          case 74: break;
          case 31: 
            { return symbol(sym.DEFER);
            }
          case 75: break;
          case 32: 
            { return symbol(sym.CONST);
            }
          case 76: break;
          case 33: 
            { return symbol(sym.BREAK);
            }
          case 77: break;
          case 34: 
            { return symbol(sym.RETURN);
            }
          case 78: break;
          case 35: 
            { return symbol(sym.IMPORT);
            }
          case 79: break;
          case 36: 
            { return symbol(sym.SELECT);
            }
          case 80: break;
          case 37: 
            { return symbol(sym.SWITCH);
            }
          case 81: break;
          case 38: 
            { return symbol(sym.DEFAULT);
            }
          case 82: break;
          case 39: 
            { return symbol(sym.INTEGER_LITERAL);
            }
          case 83: break;
          case 40: 
            { return symbol(sym.PACKAGE);
            }
          case 84: break;
          case 41: 
            { return symbol(sym.CONTINUE);
            }
          case 85: break;
          case 42: 
            { return symbol(sym.INTERFACE);
            }
          case 86: break;
          case 43: 
            { return symbol(sym.HEX_LITERAL);
            }
          case 87: break;
          case 44: 
            { return symbol(sym.FALLTHROUGH);
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
