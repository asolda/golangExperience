/* The following code was generated by JFlex 1.6.1 */

/* JFlex for go example */

import java_cup.runtime.*;
import java.util.Set;
import java.util.Hashtable;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/luigi/git/compilatori/golangExperience/analizzatore_lessicale/golang.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\33\1\33\1\1\22\0\1\0\1\62\1\100"+
    "\2\0\1\77\1\61\1\55\1\63\1\64\1\4\1\57\1\76\1\60"+
    "\1\13\1\3\1\11\1\47\1\52\1\51\1\53\1\7\1\50\1\7"+
    "\1\46\1\6\1\75\1\36\1\66\1\56\1\72\2\0\6\10\5\5"+
    "\1\34\13\5\1\12\2\5\1\67\1\101\1\70\1\71\1\27\1\0"+
    "\1\16\1\30\1\17\1\37\1\22\1\32\1\21\1\35\1\14\1\5"+
    "\1\20\1\40\1\42\1\26\1\41\1\15\1\5\1\25\1\23\1\24"+
    "\1\31\1\45\1\43\1\54\1\44\1\5\1\73\1\65\1\74\7\0"+
    "\1\33\u1fa2\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\2\5\1\6\13\4"+
    "\1\7\3\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\1\42\1\43\1\0"+
    "\1\44\1\45\2\0\1\4\1\46\5\4\1\47\21\4"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\2\40\2\0"+
    "\2\76\1\77\1\100\1\101\24\4\1\102\1\4\1\103"+
    "\1\104\1\105\1\106\1\107\1\0\1\40\1\4\1\110"+
    "\3\0\2\4\1\111\1\112\3\4\1\113\1\114\4\4"+
    "\1\115\2\4\1\116\1\117\1\120\1\4\1\121\4\4"+
    "\1\122\1\123\1\124\2\4\1\125\6\4\1\126\2\4"+
    "\1\127\3\0\3\4\1\130\1\4\1\131\3\4\1\132"+
    "\1\133\1\3\1\134\1\135\1\4\1\136\1\137\1\140"+
    "\1\4\2\0\2\4\1\141\3\4\1\142\1\4\1\143"+
    "\1\144\1\145\1\4\1\146\2\0\2\4\1\147\1\0"+
    "\1\150\2\4\1\151\2\4\1\0\1\4\1\152\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\6\0\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\306\0\u056a\0\u05ac"+
    "\0\u05ee\0\306\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\306"+
    "\0\306\0\u077a\0\u07bc\0\306\0\306\0\u07fe\0\u0840\0\306"+
    "\0\306\0\u0882\0\306\0\u08c4\0\306\0\u0906\0\306\0\306"+
    "\0\u0948\0\u098a\0\u09cc\0\306\0\u0a0e\0\306\0\u0a50\0\306"+
    "\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u018c\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\u1104\0\u1146\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\u1188\0\306\0\306\0\306\0\306"+
    "\0\u11ca\0\306\0\306\0\u120c\0\306\0\306\0\306\0\306"+
    "\0\306\0\306\0\u124e\0\306\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u0ad4\0\306\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u018c"+
    "\0\u1902\0\u018c\0\u018c\0\306\0\306\0\306\0\u1944\0\u1290"+
    "\0\u1986\0\306\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u018c"+
    "\0\u018c\0\u1b12\0\u1b54\0\u1b96\0\u018c\0\u018c\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u018c\0\u1ce0\0\u1d22\0\u018c\0\u018c\0\u1d64"+
    "\0\u1da6\0\u018c\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\306\0\306"+
    "\0\306\0\u1ef0\0\u1f32\0\u018c\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u018c\0\u2100\0\u2142\0\306\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u018c\0\u2310\0\u018c\0\u2352"+
    "\0\u2394\0\u23d6\0\u018c\0\u2418\0\u018c\0\u018c\0\u018c\0\u245a"+
    "\0\306\0\306\0\306\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u018c\0\u25e6\0\u2628\0\u266a\0\u018c\0\u26ac\0\306\0\306"+
    "\0\u018c\0\u26ee\0\u018c\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u018c"+
    "\0\u2838\0\306\0\u287a\0\u28bc\0\306\0\u28fe\0\u2940\0\u2982"+
    "\0\u29c4\0\u018c\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60"+
    "\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70"+
    "\0\u2fb2\0\u2ff4\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\4\1\5\1\6\1\7\2\10\1\7\1\11\1\7"+
    "\1\12\1\13\1\14\1\7\1\15\1\7\1\16\1\17"+
    "\1\20\1\21\1\22\2\7\1\23\1\24\1\25\1\4"+
    "\2\7\1\26\1\27\2\7\1\30\2\7\1\31\6\10"+
    "\1\7\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\103\4\1\56\1\4"+
    "\1\57\75\56\1\60\1\61\105\0\1\62\1\63\51\0"+
    "\1\64\30\0\1\65\2\0\1\65\1\0\1\65\1\0"+
    "\17\65\1\0\2\65\1\0\7\65\6\0\1\65\1\0"+
    "\1\66\30\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\17\7\1\0\2\7\1\0\7\7\6\0\1\7\33\0"+
    "\2\10\1\0\1\10\1\0\1\67\1\70\31\0\6\10"+
    "\35\0\1\71\1\0\1\71\1\72\1\67\1\70\32\0"+
    "\5\71\1\72\40\0\1\73\73\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\74\3\7\1\75\1\0"+
    "\2\7\1\0\3\7\1\76\3\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\2\7\1\77"+
    "\14\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\2\7\1\100"+
    "\14\7\1\0\1\7\1\101\1\0\2\7\1\102\4\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\2\7\1\0\2\7\1\103\4\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\2\7\1\0\1\7\1\104\5\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\6\7\1\105\1\7\1\106\6\7\1\0\2\7"+
    "\1\0\4\7\1\107\2\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\17\7\1\0\2\7"+
    "\1\0\5\7\1\110\1\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\2\7\1\111\3\7"+
    "\1\112\6\7\1\113\1\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\2\7\1\0\5\7\1\114\1\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\115\16\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\116\12\7\1\117\1\7\1\0\2\7\1\0"+
    "\1\7\1\120\1\121\4\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\122\10\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\2\7\1\123\14\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\2\7\1\124\14\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\103\0\1\125"+
    "\101\0\1\126\1\127\100\0\1\130\1\0\1\131\77\0"+
    "\1\132\2\0\1\133\7\0\1\134\66\0\1\135\101\0"+
    "\1\136\6\0\1\137\72\0\1\130\1\0\1\140\5\0"+
    "\1\141\71\0\1\142\101\0\1\143\13\0\1\144\65\0"+
    "\1\145\101\0\1\146\23\0\1\56\2\0\75\56\26\0"+
    "\1\147\1\150\1\151\51\0\1\152\1\0\1\62\1\153"+
    "\1\154\77\62\4\155\1\156\75\155\5\0\1\65\2\0"+
    "\1\65\1\0\1\65\1\0\17\65\1\0\2\65\1\0"+
    "\7\65\6\0\1\65\33\0\2\157\1\0\1\160\34\0"+
    "\6\157\35\0\1\71\1\0\1\71\35\0\5\71\34\0"+
    "\4\161\4\0\2\161\2\0\1\161\5\0\1\161\1\0"+
    "\1\161\4\0\1\161\6\0\6\161\41\0\1\162\73\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\10\7\1\163"+
    "\6\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\164"+
    "\15\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\3\7\1\165"+
    "\13\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\7\7\1\166"+
    "\7\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\2\7\1\167"+
    "\14\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\12\7\1\170"+
    "\4\7\1\0\2\7\1\0\3\7\1\171\3\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\10\7\1\172\6\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\1\173\7\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\17\7\1\0\2\7\1\0\1\7\1\174\5\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\11\7\1\175\5\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\176\16\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\177\15\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\12\7"+
    "\1\200\4\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\10\7"+
    "\1\201\6\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\12\7"+
    "\1\202\4\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\10\7"+
    "\1\203\6\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\12\7"+
    "\1\204\4\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\17\7"+
    "\1\0\2\7\1\0\1\7\1\205\5\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\12\7"+
    "\1\206\4\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\17\7"+
    "\1\0\2\7\1\0\2\7\1\207\4\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\11\7"+
    "\1\210\5\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\16\7"+
    "\1\211\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\212"+
    "\15\7\1\0\2\7\1\0\7\7\6\0\1\7\32\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\11\7\1\213"+
    "\5\7\1\0\2\7\1\0\7\7\6\0\1\7\103\0"+
    "\1\214\101\0\1\215\101\0\1\216\25\0\1\154\77\0"+
    "\4\155\1\217\100\155\1\220\1\217\75\155\6\0\2\157"+
    "\1\0\1\157\2\0\1\70\31\0\6\157\42\0\1\70"+
    "\72\0\1\7\2\0\1\7\1\0\1\7\1\0\6\7"+
    "\1\221\10\7\1\0\2\7\1\0\7\7\1\222\1\223"+
    "\1\224\1\225\2\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\17\7\1\0\2\7\1\0\2\7"+
    "\1\226\4\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\4\7\1\227\12\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\6\7\1\230\10\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\231\4\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\1\232\1\233\6\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\234\15\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\17\7\1\0\2\7\1\0"+
    "\2\7\1\235\4\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\6\7\1\236\10\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\6\7\1\237\10\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\1\240\14\7\1\241\1\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\10\7\1\242\6\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\243\10\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\5\7\1\244\11\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\15\7\1\245\1\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\246\10\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\247\10\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\10\7\1\250\6\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\17\7\1\0\2\7"+
    "\1\0\1\7\1\251\5\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\3\7\1\252\13\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\2\7\1\253\14\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\2\7\1\254\3\7"+
    "\1\255\10\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\25\0\3\155\1\154\1\217\75\155\5\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\11\7\1\256\5\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\75\0\1\257\104\0"+
    "\1\260\100\0\1\261\34\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\11\7\1\262\5\7\1\0\2\7\1\0"+
    "\7\7\6\0\1\7\32\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\263\14\7\1\0\2\7\1\0"+
    "\7\7\6\0\1\7\32\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\10\7\1\264\6\7\1\0\2\7\1\0"+
    "\7\7\6\0\1\7\32\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\265\16\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\2\7\1\0\1\7\1\266\5\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\267\13\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\12\7\1\270\4\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\271\13\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\272\13\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\6\7\1\273\10\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\11\7\1\274\5\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\275\15\7\1\0\2\7\1\0\7\7"+
    "\1\276\1\277\1\300\1\301\2\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\10\7\1\302\6\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\10\7\1\303\6\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\15\7\1\304\1\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\11\7\1\305\5\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\32\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\16\7\1\306\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\10\7\1\307\6\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\5\7\1\310\11\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\12\7\1\311\4\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\6\7\1\312\10\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\10\7\1\313\6\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\5\7\1\314\11\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\10\7\1\315\6\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\17\7\1\0\1\7\1\316"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\317\4\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\10\7\1\320\6\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\75\0\1\321\104\0\1\322"+
    "\100\0\1\323\34\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\1\7\1\324\1\0\7\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\17\7\1\0\2\7\1\0\7\7\2\0\1\325\1\326"+
    "\2\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\2\7\1\0\1\7\1\327\5\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\330\14\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\6\7\1\331\10\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\15\7\1\332\1\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\17\7\1\0\2\7\1\0\7\7\6\0\1\333"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\13\7"+
    "\1\334\3\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\11\7"+
    "\1\335\5\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\32\0\1\7\2\0\1\7\1\0\1\7\1\0\11\7"+
    "\1\336\5\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\100\0\1\337\100\0\1\340\34\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\10\7\1\341\6\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\342\13\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\6\7\1\343\10\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\32\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\17\7\1\0\2\7\1\0\7\7"+
    "\1\0\1\344\1\345\3\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\14\7\1\346\2\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\17\7\1\0\2\7\1\0"+
    "\2\7\1\347\4\7\6\0\1\7\32\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\6\7\1\350\10\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\77\0\1\351\102\0"+
    "\1\352\33\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\15\7\1\353\1\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\32\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\15\7\1\354\1\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\73\0\1\355\40\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\16\7\1\356\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\32\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\5\7\1\357\11\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\25\0\1\360\2\0\2\360\1\361\2\360"+
    "\1\361\1\360\1\361\1\360\17\361\1\0\2\361\1\360"+
    "\7\361\6\360\1\361\25\360\5\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\17\7\1\0\1\7\1\362\1\0"+
    "\7\7\6\0\1\7\50\0\1\363\63\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\0\7\7\1\364\7\7\1\0"+
    "\2\7\1\0\7\7\6\0\1\7\47\0\1\365\64\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\0\6\7\1\366"+
    "\10\7\1\0\2\7\1\0\7\7\6\0\1\7\51\0"+
    "\1\367\62\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\10\7\1\370\6\7\1\0\2\7\1\0\7\7\6\0"+
    "\1\7\61\0\1\371\52\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\0\17\7\1\0\1\372\1\7\1\0\7\7"+
    "\6\0\1\7\47\0\1\373\64\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\6\7\1\374\10\7\1\0\2\7"+
    "\1\0\7\7\6\0\1\7\53\0\1\375\60\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\12\7\1\376\4\7"+
    "\1\0\2\7\1\0\7\7\6\0\1\7\46\0\1\377"+
    "\65\0\1\7\2\0\1\7\1\0\1\7\1\0\5\7"+
    "\1\u0100\11\7\1\0\2\7\1\0\7\7\6\0\1\7"+
    "\51\0\1\u0101\62\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\0\10\7\1\u0102\6\7\1\0\2\7\1\0\7\7"+
    "\6\0\1\7\62\0\1\u0103\51\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\17\7\1\0\1\7\1\u0104\1\0"+
    "\7\7\6\0\1\7\36\0\1\u0105\75\0\1\7\2\0"+
    "\1\7\1\u0105\1\7\1\0\17\7\1\0\2\7\1\0"+
    "\7\7\6\0\1\7\63\0\1\u0106\73\0\1\u0107\76\0"+
    "\1\u0108\76\0\1\u0109\75\0\1\u010a\103\0\1\u010b\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12342];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\21\1\1\11\3\1\1\11\5\1\2\11"+
    "\2\1\2\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\2\1\1\0\1\11\1\1\1\11\1\0"+
    "\1\11\1\1\2\0\31\1\7\11\1\1\4\11\1\1"+
    "\2\11\1\1\6\11\1\1\1\11\2\0\3\1\1\11"+
    "\31\1\3\11\1\0\2\1\1\11\3\0\31\1\3\11"+
    "\14\1\1\11\3\0\17\1\3\11\1\1\2\0\10\1"+
    "\2\11\3\1\2\0\3\1\1\0\1\11\2\1\1\11"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
     
        StringBuffer buff = new StringBuffer();
        int countNum = 0;
	int countID = 0;
	int countString = 0;
	int comment_nesting = 0;


    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   
    switch(zzLexicalState) {
		case YYINITIAL:
		break;
		case COMMENT:
		yybegin(YYINITIAL);
		return symbol(sym.ERROR, "EOF in comment");
		case STRING:
		yybegin(YYINITIAL);
		return symbol(sym.ERROR, "EOF in string constant");
	}

	System.out.println("symTable:");
	Set<Integer> keys = Tables.symTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.symTable.get(key));
        }
	System.out.println("numTable:");
	keys = Tables.numTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.numTable.get(key));
        }
	System.out.println("stringTable:");
	keys = Tables.stringTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.stringTable.get(key));
        }
    return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { throw new Error(\"Illegal character <\"+ yytext()+\">\"); }");
            { throw new Error("Illegal character <"+ yytext()+">");
            }
          case 108: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return symbol(sym.DIV); }");
            { return symbol(sym.DIV);
            }
          case 109: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return symbol(sym.TIME); }");
            { return symbol(sym.TIME);
            }
          case 110: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { Tables.symTable.put(countID, yytext());int c = countID; countID++; return symbol(sym.IDENTIFIER); }");
            { Tables.symTable.put(countID, yytext());int c = countID; countID++; return symbol(sym.IDENTIFIER);
            }
          case 111: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return symbol(sym.DECIMAL_LITERAL); }");
            { return symbol(sym.DECIMAL_LITERAL);
            }
          case 112: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return symbol(sym.POINT); }");
            { return symbol(sym.POINT);
            }
          case 113: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return symbol(sym.SEMICOLON); }");
            { return symbol(sym.SEMICOLON);
            }
          case 114: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return symbol(sym.SINGLEQUOTE); }");
            { return symbol(sym.SINGLEQUOTE);
            }
          case 115: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return symbol(sym.EQ); }");
            { return symbol(sym.EQ);
            }
          case 116: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return symbol(sym.PLUS); }");
            { return symbol(sym.PLUS);
            }
          case 117: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return symbol(sym.MINUS); }");
            { return symbol(sym.MINUS);
            }
          case 118: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { return symbol(sym.AND); }");
            { return symbol(sym.AND);
            }
          case 119: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return symbol(sym.NOT); }");
            { return symbol(sym.NOT);
            }
          case 120: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return symbol(sym.RO); }");
            { return symbol(sym.RO);
            }
          case 121: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return symbol(sym.RC); }");
            { return symbol(sym.RC);
            }
          case 122: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return symbol(sym.OR); }");
            { return symbol(sym.OR);
            }
          case 123: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return symbol(sym.AO); }");
            { return symbol(sym.AO);
            }
          case 124: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return symbol(sym.OS); }");
            { return symbol(sym.OS);
            }
          case 125: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return symbol(sym.CS); }");
            { return symbol(sym.CS);
            }
          case 126: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return symbol(sym.CAP); }");
            { return symbol(sym.CAP);
            }
          case 127: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return symbol(sym.AC); }");
            { return symbol(sym.AC);
            }
          case 128: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return symbol(sym.BRACEO); }");
            { return symbol(sym.BRACEO);
            }
          case 129: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return symbol(sym.BRACEC); }");
            { return symbol(sym.BRACEC);
            }
          case 130: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return symbol(sym.TP); }");
            { return symbol(sym.TP);
            }
          case 131: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return symbol(sym.COMMA); }");
            { return symbol(sym.COMMA);
            }
          case 132: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return symbol(sym.PERC); }");
            { return symbol(sym.PERC);
            }
          case 133: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { buff.setLength(0); yybegin(STRING);  yybegin(STRING); }");
            { buff.setLength(0); yybegin(STRING);  yybegin(STRING);
            }
          case 134: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { buff.append(yytext()); }");
            { buff.append(yytext());
            }
          case 135: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { yybegin(YYINITIAL); return symbol(sym.ERROR_STRING,\"EOF in string constant\"); }");
            { yybegin(YYINITIAL); return symbol(sym.ERROR_STRING,"EOF in string constant");
            }
          case 136: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { Tables.stringTable.put(countString, buff);int c = countString; countString++; System.out.println(\"buffer: \" + buff); return symbol(sym.STRING,c); }");
            { Tables.stringTable.put(countString, buff);int c = countString; countString++; System.out.println("buffer: " + buff); return symbol(sym.STRING,c);
            }
          case 137: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { buff.append(\'\\\\\'); }");
            { buff.append('\\');
            }
          case 138: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return symbol(sym.COMMENT); }");
            { return symbol(sym.COMMENT);
            }
          case 139: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return symbol(sym.DIVEQ); }");
            { return symbol(sym.DIVEQ);
            }
          case 140: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return symbol(sym.POINTER); }");
            { return symbol(sym.POINTER);
            }
          case 141: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { return symbol(sym.TIMEEQ); }");
            { return symbol(sym.TIMEEQ);
            }
          case 142: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return symbol(sym.IMAGINARY_LITERAL); }");
            { return symbol(sym.IMAGINARY_LITERAL);
            }
          case 143: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return symbol(sym.OCTAL_LITERAL); }");
            { return symbol(sym.OCTAL_LITERAL);
            }
          case 144: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return symbol(sym.IF); }");
            { return symbol(sym.IF);
            }
          case 145: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return symbol(sym.GO); }");
            { return symbol(sym.GO);
            }
          case 146: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return symbol(sym.EQEQ); }");
            { return symbol(sym.EQEQ);
            }
          case 147: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { return symbol(sym.PLUSEQ); }");
            { return symbol(sym.PLUSEQ);
            }
          case 148: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return symbol(sym.PLUSPLUS); }");
            { return symbol(sym.PLUSPLUS);
            }
          case 149: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return symbol(sym.MINUSEQ); }");
            { return symbol(sym.MINUSEQ);
            }
          case 150: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return symbol(sym.MINUSMINUS); }");
            { return symbol(sym.MINUSMINUS);
            }
          case 151: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return symbol(sym.ANDEQ); }");
            { return symbol(sym.ANDEQ);
            }
          case 152: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return symbol(sym.ANDAND); }");
            { return symbol(sym.ANDAND);
            }
          case 153: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return symbol(sym.ANDCAP); }");
            { return symbol(sym.ANDCAP);
            }
          case 154: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return symbol(sym.NOTEQ); }");
            { return symbol(sym.NOTEQ);
            }
          case 155: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return symbol(sym.OREQ); }");
            { return symbol(sym.OREQ);
            }
          case 156: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return symbol(sym.OROR); }");
            { return symbol(sym.OROR);
            }
          case 157: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { return symbol(sym.AOMINUS); }");
            { return symbol(sym.AOMINUS);
            }
          case 158: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return symbol(sym.AOAO); }");
            { return symbol(sym.AOAO);
            }
          case 159: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { return symbol(sym.CAPEQ); }");
            { return symbol(sym.CAPEQ);
            }
          case 160: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return symbol(sym.AOEQUALS); }");
            { return symbol(sym.AOEQUALS);
            }
          case 161: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return symbol(sym.ACAC); }");
            { return symbol(sym.ACAC);
            }
          case 162: break;
          case 56: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return symbol(sym.TPEQ); }");
            { return symbol(sym.TPEQ);
            }
          case 163: break;
          case 57: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return symbol(sym.PERCEQ); }");
            { return symbol(sym.PERCEQ);
            }
          case 164: break;
          case 58: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { buff.append(\'\\t\'); }");
            { buff.append('\t');
            }
          case 165: break;
          case 59: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { buff.append(\'\\r\'); }");
            { buff.append('\r');
            }
          case 166: break;
          case 60: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { buff.append(\'\\n\'); }");
            { buff.append('\n');
            }
          case 167: break;
          case 61: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { buff.append(\'\\\"\'); }");
            { buff.append('\"');
            }
          case 168: break;
          case 62: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return symbol(sym.FLOAT_LITERAL); }");
            { return symbol(sym.FLOAT_LITERAL);
            }
          case 169: break;
          case 63: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return symbol(sym.HEX_LITERAL); }");
            { return symbol(sym.HEX_LITERAL);
            }
          case 170: break;
          case 64: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return symbol(sym.POINTPOINTPOINT); }");
            { return symbol(sym.POINTPOINTPOINT);
            }
          case 171: break;
          case 65: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return symbol(sym.INT); }");
            { return symbol(sym.INT);
            }
          case 172: break;
          case 66: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return symbol(sym.FOR); }");
            { return symbol(sym.FOR);
            }
          case 173: break;
          case 67: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return symbol(sym.MAP); }");
            { return symbol(sym.MAP);
            }
          case 174: break;
          case 68: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return symbol(sym.VAR); }");
            { return symbol(sym.VAR);
            }
          case 175: break;
          case 69: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { return symbol(sym.ANDCAPEQ); }");
            { return symbol(sym.ANDCAPEQ);
            }
          case 176: break;
          case 70: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return symbol(sym.AOAOEQ); }");
            { return symbol(sym.AOAOEQ);
            }
          case 177: break;
          case 71: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return symbol(sym.ACACEQ); }");
            { return symbol(sym.ACACEQ);
            }
          case 178: break;
          case 72: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return symbol(sym.INT8); }");
            { return symbol(sym.INT8);
            }
          case 179: break;
          case 73: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return symbol(sym.CASE); }");
            { return symbol(sym.CASE);
            }
          case 180: break;
          case 74: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return symbol(sym.CHAN); }");
            { return symbol(sym.CHAN);
            }
          case 181: break;
          case 75: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return symbol(sym.GOTO); }");
            { return symbol(sym.GOTO);
            }
          case 182: break;
          case 76: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            }
          case 183: break;
          case 77: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return symbol(sym.TYPE); }");
            { return symbol(sym.TYPE);
            }
          case 184: break;
          case 78: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return symbol(sym.RUNE); }");
            { return symbol(sym.RUNE);
            }
          case 185: break;
          case 79: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return symbol(sym.BYTE); }");
            { return symbol(sym.BYTE);
            }
          case 186: break;
          case 80: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return symbol(sym.UINT); }");
            { return symbol(sym.UINT);
            }
          case 187: break;
          case 81: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return symbol(sym.FUNC); }");
            { return symbol(sym.FUNC);
            }
          case 188: break;
          case 82: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return symbol(sym.INT16); }");
            { return symbol(sym.INT16);
            }
          case 189: break;
          case 83: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return symbol(sym.INT64); }");
            { return symbol(sym.INT64);
            }
          case 190: break;
          case 84: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return symbol(sym.INT32); }");
            { return symbol(sym.INT32);
            }
          case 191: break;
          case 85: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return symbol(sym.CONST); }");
            { return symbol(sym.CONST);
            }
          case 192: break;
          case 86: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return symbol(sym.RANGE); }");
            { return symbol(sym.RANGE);
            }
          case 193: break;
          case 87: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return symbol(sym.UINT8); }");
            { return symbol(sym.UINT8);
            }
          case 194: break;
          case 88: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return symbol(sym.DEFER); }");
            { return symbol(sym.DEFER);
            }
          case 195: break;
          case 89: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return symbol(sym.IMPORT); }");
            { return symbol(sym.IMPORT);
            }
          case 196: break;
          case 90: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return symbol(sym.SELECT); }");
            { return symbol(sym.SELECT);
            }
          case 197: break;
          case 91: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return symbol(sym.STRING); }");
            { return symbol(sym.STRING);
            }
          case 198: break;
          case 92: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return symbol(sym.SWITCH); }");
            { return symbol(sym.SWITCH);
            }
          case 199: break;
          case 93: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return symbol(sym.RETURN); }");
            { return symbol(sym.RETURN);
            }
          case 200: break;
          case 94: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return symbol(sym.UINT16); }");
            { return symbol(sym.UINT16);
            }
          case 201: break;
          case 95: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return symbol(sym.UINT64); }");
            { return symbol(sym.UINT64);
            }
          case 202: break;
          case 96: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return symbol(sym.UINT32); }");
            { return symbol(sym.UINT32);
            }
          case 203: break;
          case 97: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return symbol(sym.PACKAGE); }");
            { return symbol(sym.PACKAGE);
            }
          case 204: break;
          case 98: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return symbol(sym.UINTPTR); }");
            { return symbol(sym.UINTPTR);
            }
          case 205: break;
          case 99: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return symbol(sym.FLOAT64); }");
            { return symbol(sym.FLOAT64);
            }
          case 206: break;
          case 100: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return symbol(sym.FLOAT32); }");
            { return symbol(sym.FLOAT32);
            }
          case 207: break;
          case 101: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return symbol(sym.DEFAULT); }");
            { return symbol(sym.DEFAULT);
            }
          case 208: break;
          case 102: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return symbol(sym.CONTINUE); }");
            { return symbol(sym.CONTINUE);
            }
          case 209: break;
          case 103: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return symbol(sym.INTERFACE); }");
            { return symbol(sym.INTERFACE);
            }
          case 210: break;
          case 104: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return symbol(sym.COMPLEX64); }");
            { return symbol(sym.COMPLEX64);
            }
          case 211: break;
          case 105: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.COMPLEX128); }");
            { return symbol(sym.COMPLEX128);
            }
          case 212: break;
          case 106: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return symbol(sym.FALLTHROUGH); }");
            { return symbol(sym.FALLTHROUGH);
            }
          case 213: break;
          case 107: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return symbol(sym.BREAK); }");
            { return symbol(sym.BREAK);
            }
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
