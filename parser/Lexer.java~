/* The following code was generated by JFlex 1.4.3 on 28/05/16 18.51 */

/* JFlex for go example */

import java_cup.runtime.*;
import java.util.Set;
import java.util.Hashtable;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/16 18.51 from the specification file
 * <tt>go.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\62\1\100"+
    "\2\0\1\77\1\61\1\55\1\63\1\64\1\5\1\57\1\76\1\60"+
    "\1\14\1\4\1\12\1\47\1\52\1\51\1\53\1\10\1\50\1\10"+
    "\1\46\1\7\1\75\1\36\1\66\1\56\1\72\2\0\6\11\5\6"+
    "\1\34\13\6\1\13\2\6\1\67\1\101\1\70\1\71\1\30\1\0"+
    "\1\17\1\31\1\20\1\37\1\23\1\33\1\22\1\35\1\15\1\6"+
    "\1\21\1\40\1\42\1\27\1\41\1\16\1\6\1\26\1\24\1\25"+
    "\1\32\1\45\1\43\1\54\1\44\1\6\1\73\1\65\1\74\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\13\5\1\10\3\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\1\42\1\43\1\0"+
    "\1\44\1\45\2\0\1\5\1\46\5\5\1\47\21\5"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\2\41"+
    "\2\0\2\77\1\100\1\101\1\102\24\5\1\103\1\5"+
    "\1\104\1\105\1\106\1\107\1\110\1\0\1\41\1\5"+
    "\1\111\3\0\2\5\1\112\1\113\3\5\1\114\1\115"+
    "\4\5\1\116\2\5\1\117\1\120\1\121\1\5\1\122"+
    "\4\5\1\123\1\124\1\125\2\5\1\126\6\5\1\127"+
    "\2\5\1\130\3\0\3\5\1\131\1\5\1\132\3\5"+
    "\1\133\1\134\1\4\1\135\1\136\1\5\1\137\1\140"+
    "\1\141\1\5\2\0\2\5\1\142\3\5\1\143\1\5"+
    "\1\144\1\145\1\146\1\5\1\147\2\0\2\5\1\150"+
    "\1\0\1\151\2\5\1\152\2\5\1\0\1\5\1\153"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\306\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\306"+
    "\0\u05ac\0\u05ee\0\u0630\0\306\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\306\0\306\0\u07bc\0\u07fe\0\306\0\306\0\u0840"+
    "\0\u0882\0\306\0\306\0\u08c4\0\306\0\u0906\0\306\0\u0948"+
    "\0\306\0\306\0\u098a\0\u09cc\0\u0a0e\0\306\0\306\0\u0a50"+
    "\0\306\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u01ce\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\u1188\0\306\0\306\0\306"+
    "\0\306\0\306\0\u11ca\0\306\0\306\0\u120c\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\u124e\0\306\0\u1290\0\u12d2"+
    "\0\u1314\0\u1356\0\u0ad4\0\306\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u01ce\0\u1902\0\u01ce\0\u01ce\0\306\0\306\0\306"+
    "\0\u1944\0\u1290\0\u1986\0\306\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u01ce\0\u01ce\0\u1b12\0\u1b54\0\u1b96\0\u01ce\0\u01ce"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u01ce\0\u1ce0\0\u1d22\0\u01ce"+
    "\0\u01ce\0\u1d64\0\u1da6\0\u01ce\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\306\0\306\0\306\0\u1ef0\0\u1f32\0\u01ce\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u01ce\0\u2100\0\u2142\0\306"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u01ce\0\u2310"+
    "\0\u01ce\0\u2352\0\u2394\0\u23d6\0\u01ce\0\u2418\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u245a\0\306\0\306\0\306\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u01ce\0\u25e6\0\u2628\0\u266a\0\u01ce\0\u26ac"+
    "\0\306\0\306\0\u01ce\0\u26ee\0\u01ce\0\u2730\0\u2772\0\u27b4"+
    "\0\u27f6\0\u01ce\0\u2838\0\306\0\u287a\0\u28bc\0\306\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u01ce\0\u2a06\0\u2a48\0\u2a8a\0\u2acc"+
    "\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc"+
    "\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\2\12\1\11"+
    "\1\13\1\11\1\14\1\15\1\16\1\11\1\17\1\11"+
    "\1\20\1\21\1\22\1\23\1\24\2\11\1\25\1\26"+
    "\1\27\2\11\1\30\1\31\2\11\1\32\2\11\1\33"+
    "\6\12\1\11\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\103\4\1\60"+
    "\1\4\1\61\75\60\1\62\1\63\104\0\1\6\103\0"+
    "\1\64\1\65\50\0\1\66\101\0\1\67\31\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\21\11\1\0\7\11"+
    "\6\0\1\11\34\0\2\12\1\0\1\12\1\0\1\70"+
    "\1\71\30\0\6\12\36\0\1\72\1\0\1\72\1\73"+
    "\1\70\1\71\31\0\5\72\1\73\41\0\1\74\73\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\12\11\1\75"+
    "\3\11\1\76\2\11\1\0\3\11\1\77\3\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\100\16\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\2\11\1\101"+
    "\15\11\1\102\1\0\2\11\1\103\4\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\21\11"+
    "\1\0\2\11\1\104\4\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\21\11\1\0\1\11"+
    "\1\105\5\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\6\11\1\106\1\11\1\107\10\11"+
    "\1\0\4\11\1\110\2\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\21\11\1\0\5\11"+
    "\1\111\1\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\112\3\11\1\113\6\11"+
    "\1\114\3\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\21\11\1\0\5\11"+
    "\1\115\1\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\116\20\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\117\12\11\1\120\3\11\1\0\1\11\1\121"+
    "\1\122\4\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\6\11\1\123\12\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\2\11\1\124\16\11\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\2\11"+
    "\1\125\16\11\1\0\7\11\6\0\1\11\103\0\1\126"+
    "\101\0\1\127\1\130\100\0\1\131\1\0\1\132\77\0"+
    "\1\133\2\0\1\134\7\0\1\135\66\0\1\136\101\0"+
    "\1\137\6\0\1\140\72\0\1\141\1\0\1\142\5\0"+
    "\1\143\71\0\1\144\101\0\1\145\13\0\1\146\65\0"+
    "\1\147\101\0\1\150\23\0\1\60\2\0\75\60\27\0"+
    "\1\151\1\152\1\153\50\0\1\154\1\0\1\64\1\155"+
    "\1\156\77\64\5\157\1\160\74\157\7\0\2\161\1\0"+
    "\1\162\33\0\6\161\36\0\1\72\1\0\1\72\34\0"+
    "\5\72\35\0\4\163\4\0\2\163\2\0\1\163\5\0"+
    "\1\163\1\0\1\163\3\0\1\163\6\0\6\163\42\0"+
    "\1\164\73\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\1\165\10\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\166"+
    "\17\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\167\15\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\7\11\1\170\11\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\171\16\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\12\11\1\172"+
    "\6\11\1\0\3\11\1\173\3\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\10\11\1\174"+
    "\10\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\7\11\1\175\11\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\21\11\1\0\1\11\1\176\5\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\11\11\1\177\7\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\200\20\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\201\17\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\12\11\1\202\6\11\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\1\203\10\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\12\11\1\204\6\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\1\205\10\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\12\11\1\206\6\11\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\21\11"+
    "\1\0\1\11\1\207\5\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\12\11\1\210\6\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\21\11\1\0\2\11\1\211\4\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\11\11\1\212\7\11\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\16\11"+
    "\1\213\2\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\214\17\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\11\11\1\215\7\11\1\0\7\11"+
    "\6\0\1\11\103\0\1\216\101\0\1\217\101\0\1\220"+
    "\25\0\1\156\77\0\5\157\1\221\100\157\1\222\1\221"+
    "\74\157\7\0\2\161\1\0\1\161\2\0\1\71\30\0"+
    "\6\161\43\0\1\71\72\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\6\11\1\223\12\11\1\0\7\11\1\224"+
    "\1\225\1\226\1\227\2\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\21\11\1\0\2\11\1\230"+
    "\4\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\4\11\1\231\14\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\6\11\1\232\12\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\12\11\1\233"+
    "\6\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\7\11\1\234\1\235\10\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\236\17\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\21\11\1\0\2\11\1\237\4\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\6\11"+
    "\1\240\12\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\6\11\1\241\12\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\242\14\11\1\243\3\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\1\244\10\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\6\11\1\245\12\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\5\11\1\246"+
    "\13\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\15\11\1\247\3\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\6\11\1\250\12\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\6\11\1\251\12\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\10\11\1\252"+
    "\10\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\21\11\1\0\1\11\1\253"+
    "\5\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\3\11\1\254\15\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\255\16\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\2\11\1\256"+
    "\3\11\1\257\12\11\1\0\7\11\6\0\1\11\25\0"+
    "\4\157\1\156\1\221\74\157\6\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\11\11\1\260\7\11\1\0\7\11"+
    "\6\0\1\11\75\0\1\261\104\0\1\262\100\0\1\263"+
    "\35\0\1\11\2\0\1\11\1\0\1\11\1\0\11\11"+
    "\1\264\7\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\2\11\1\265\16\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\10\11\1\266\10\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\267\20\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\21\11\1\0"+
    "\1\11\1\270\5\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\271\15\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\12\11\1\272\6\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\273\15\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\3\11\1\274"+
    "\15\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\6\11\1\275\12\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\11\11\1\276\7\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\277\17\11\1\0\7\11\1\300\1\301\1\302"+
    "\1\303\2\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\10\11\1\304\10\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\1\305\10\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\15\11\1\306"+
    "\3\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\11\11\1\307\7\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\16\11\1\310\2\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\1\311\10\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\5\11\1\312"+
    "\13\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\12\11\1\313\6\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\6\11\1\314\12\11\1\0\7\11\6\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\10\11\1\315\10\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\5\11\1\316"+
    "\13\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\10\11\1\317\10\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\20\11\1\320\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\12\11"+
    "\1\321\6\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\10\11\1\322\10\11"+
    "\1\0\7\11\6\0\1\11\75\0\1\323\104\0\1\324"+
    "\100\0\1\325\35\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\20\11\1\326\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\21\11\1\0"+
    "\7\11\2\0\1\327\1\330\2\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\21\11\1\0\1\11"+
    "\1\331\5\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\332\16\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\6\11\1\333\12\11\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\15\11"+
    "\1\334\3\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\21\11\1\0\7\11"+
    "\6\0\1\335\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\13\11\1\336\5\11\1\0\7\11\6\0\1\11"+
    "\33\0\1\11\2\0\1\11\1\0\1\11\1\0\11\11"+
    "\1\337\7\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\11\11\1\340\7\11"+
    "\1\0\7\11\6\0\1\11\100\0\1\341\100\0\1\342"+
    "\35\0\1\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\1\343\10\11\1\0\7\11\6\0\1\11\33\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\1\344\15\11"+
    "\1\0\7\11\6\0\1\11\33\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\6\11\1\345\12\11\1\0\7\11"+
    "\6\0\1\11\33\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\21\11\1\0\7\11\1\0\1\346\1\347\3\0"+
    "\1\11\33\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\14\11\1\350\4\11\1\0\7\11\6\0\1\11\33\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\21\11\1\0"+
    "\2\11\1\351\4\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\6\11\1\352\12\11\1\0"+
    "\7\11\6\0\1\11\77\0\1\353\102\0\1\354\34\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\15\11\1\355"+
    "\3\11\1\0\7\11\6\0\1\11\33\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\15\11\1\356\3\11\1\0"+
    "\7\11\6\0\1\11\73\0\1\357\41\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\16\11\1\360\2\11\1\0"+
    "\7\11\6\0\1\11\33\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\5\11\1\361\13\11\1\0\7\11\6\0"+
    "\1\11\25\0\2\362\1\0\3\362\1\363\2\362\1\363"+
    "\1\362\1\363\1\362\21\363\1\362\7\363\6\362\1\363"+
    "\25\362\6\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\20\11\1\364\1\0\7\11\6\0\1\11\51\0\1\365"+
    "\63\0\1\11\2\0\1\11\1\0\1\11\1\0\7\11"+
    "\1\366\11\11\1\0\7\11\6\0\1\11\50\0\1\367"+
    "\64\0\1\11\2\0\1\11\1\0\1\11\1\0\6\11"+
    "\1\370\12\11\1\0\7\11\6\0\1\11\52\0\1\371"+
    "\62\0\1\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\1\372\10\11\1\0\7\11\6\0\1\11\61\0\1\373"+
    "\53\0\1\11\2\0\1\11\1\0\1\11\1\0\17\11"+
    "\1\374\1\11\1\0\7\11\6\0\1\11\50\0\1\375"+
    "\64\0\1\11\2\0\1\11\1\0\1\11\1\0\6\11"+
    "\1\376\12\11\1\0\7\11\6\0\1\11\54\0\1\377"+
    "\60\0\1\11\2\0\1\11\1\0\1\11\1\0\12\11"+
    "\1\u0100\6\11\1\0\7\11\6\0\1\11\47\0\1\u0101"+
    "\65\0\1\11\2\0\1\11\1\0\1\11\1\0\5\11"+
    "\1\u0102\13\11\1\0\7\11\6\0\1\11\52\0\1\u0103"+
    "\62\0\1\11\2\0\1\11\1\0\1\11\1\0\10\11"+
    "\1\u0104\10\11\1\0\7\11\6\0\1\11\62\0\1\u0105"+
    "\52\0\1\11\2\0\1\11\1\0\1\11\1\0\20\11"+
    "\1\u0106\1\0\7\11\6\0\1\11\37\0\1\u0107\75\0"+
    "\1\11\2\0\1\11\1\u0107\1\11\1\0\21\11\1\0"+
    "\7\11\6\0\1\11\63\0\1\u0108\74\0\1\u0109\76\0"+
    "\1\u010a\76\0\1\u010b\75\0\1\u010c\103\0\1\u010d\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12342];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\21\1\1\11\3\1\1\11"+
    "\5\1\2\11\2\1\2\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\2\1\1\0\2\11\1\0"+
    "\1\11\1\1\2\0\31\1\7\11\1\1\5\11\1\1"+
    "\2\11\1\1\6\11\1\1\1\11\2\0\3\1\1\11"+
    "\31\1\3\11\1\0\2\1\1\11\3\0\31\1\3\11"+
    "\14\1\1\11\3\0\17\1\3\11\1\1\2\0\10\1"+
    "\2\11\3\1\2\0\3\1\1\0\1\11\2\1\1\11"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
     
        StringBuffer buff = new StringBuffer();
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
     }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return symbol(sym.DIV);
          }
        case 109: break;
        case 1: 
          { throw new Error("Illegal character <"+ yytext()+">");
          }
        case 110: break;
        case 78: 
          { return symbol(sym.TYPE);
          }
        case 111: break;
        case 57: 
          { return symbol(sym.TPEQ);
          }
        case 112: break;
        case 19: 
          { return symbol(sym.OS);
          }
        case 113: break;
        case 93: 
          { return symbol(sym.SWITCH);
          }
        case 114: break;
        case 2: 
          { /* ignore(WhiteSpace) */
          }
        case 115: break;
        case 87: 
          { return symbol(sym.RANGE);
          }
        case 116: break;
        case 17: 
          { return symbol(sym.OR);
          }
        case 117: break;
        case 29: 
          { buff.append(yytext());
          }
        case 118: break;
        case 50: 
          { return symbol(sym.OROR);
          }
        case 119: break;
        case 105: 
          { return symbol(sym.COMPLEX64);
          }
        case 120: break;
        case 12: 
          { return symbol(sym.MINUS);
          }
        case 121: break;
        case 28: 
          { buff.setLength(0); yybegin(STRING);
          }
        case 122: break;
        case 21: 
          { return symbol(sym.CAP);
          }
        case 123: break;
        case 89: 
          { return symbol(sym.DEFER);
          }
        case 124: break;
        case 77: 
          { return symbol(sym.ELSE);
          }
        case 125: break;
        case 8: 
          { return symbol(sym.SEMICOLON);
          }
        case 126: break;
        case 22: 
          { return symbol(sym.AC);
          }
        case 127: break;
        case 53: 
          { return symbol(sym.AOAO);
          }
        case 128: break;
        case 36: 
          { return symbol(sym.IMAGINARY_LITERAL,yytext());
          }
        case 129: break;
        case 7: 
          { return symbol(sym.POINT);
          }
        case 130: break;
        case 24: 
          { return symbol(sym.BRACEC);
          }
        case 131: break;
        case 55: 
          { return symbol(sym.ACEQUALS);
          }
        case 132: break;
        case 51: 
          { return symbol(sym.AOEQ);
          }
        case 133: break;
        case 66: 
          { return symbol(sym.INT);
          }
        case 134: break;
        case 30: 
          { yybegin(YYINITIAL); return symbol(sym.ERROR_STRING);
          }
        case 135: break;
        case 27: 
          { return symbol(sym.PERC);
          }
        case 136: break;
        case 13: 
          { return symbol(sym.AND);
          }
        case 137: break;
        case 15: 
          { return symbol(sym.RO);
          }
        case 138: break;
        case 35: 
          { return symbol(sym.TIMEEQ);
          }
        case 139: break;
        case 91: 
          { return symbol(sym.SELECT);
          }
        case 140: break;
        case 80: 
          { return symbol(sym.BYTE);
          }
        case 141: break;
        case 68: 
          { return symbol(sym.MAP);
          }
        case 142: break;
        case 25: 
          { return symbol(sym.TP);
          }
        case 143: break;
        case 99: 
          { return symbol(sym.UINTPTR);
          }
        case 144: break;
        case 58: 
          { return symbol(sym.PERCEQ);
          }
        case 145: break;
        case 38: 
          { return symbol(sym.IF);
          }
        case 146: break;
        case 14: 
          { return symbol(sym.NOT);
          }
        case 147: break;
        case 90: 
          { return symbol(sym.IMPORT);
          }
        case 148: break;
        case 32: 
          { buff.append('\\');
          }
        case 149: break;
        case 48: 
          { return symbol(sym.NOTEQ);
          }
        case 150: break;
        case 79: 
          { return symbol(sym.RUNE);
          }
        case 151: break;
        case 26: 
          { return symbol(sym.COMMA);
          }
        case 152: break;
        case 104: 
          { return symbol(sym.INTERFACE);
          }
        case 153: break;
        case 83: 
          { return symbol(sym.INT16);
          }
        case 154: break;
        case 70: 
          { return symbol(sym.ANDCAPEQ);
          }
        case 155: break;
        case 88: 
          { return symbol(sym.UINT8);
          }
        case 156: break;
        case 47: 
          { return symbol(sym.ANDCAP);
          }
        case 157: break;
        case 95: 
          { return symbol(sym.UINT16);
          }
        case 158: break;
        case 41: 
          { return symbol(sym.PLUSEQ);
          }
        case 159: break;
        case 40: 
          { return symbol(sym.EQEQ);
          }
        case 160: break;
        case 63: 
          { return symbol(sym.FLOAT_LITERAL,yytext());
          }
        case 161: break;
        case 92: 
          { return symbol(sym.STRING);
          }
        case 162: break;
        case 11: 
          { return symbol(sym.PLUS);
          }
        case 163: break;
        case 69: 
          { return symbol(sym.VAR);
          }
        case 164: break;
        case 82: 
          { return symbol(sym.FUNC);
          }
        case 165: break;
        case 46: 
          { return symbol(sym.ANDAND);
          }
        case 166: break;
        case 52: 
          { return symbol(sym.AOMINUS);
          }
        case 167: break;
        case 31: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL,buff);
          }
        case 168: break;
        case 85: 
          { return symbol(sym.INT32);
          }
        case 169: break;
        case 84: 
          { return symbol(sym.INT64);
          }
        case 170: break;
        case 5: 
          { return symbol(sym.IDENTIFIER,yytext());
          }
        case 171: break;
        case 45: 
          { return symbol(sym.ANDEQ);
          }
        case 172: break;
        case 64: 
          { return symbol(sym.HEX_LITERAL,yytext());
          }
        case 173: break;
        case 76: 
          { return symbol(sym.GOTO);
          }
        case 174: break;
        case 37: 
          { return symbol(sym.OCTAL_LITERAL,yytext());
          }
        case 175: break;
        case 16: 
          { return symbol(sym.RC);
          }
        case 176: break;
        case 94: 
          { return symbol(sym.RETURN);
          }
        case 177: break;
        case 81: 
          { return symbol(sym.UINT);
          }
        case 178: break;
        case 33: 
          { return symbol(sym.COMMENT);
          }
        case 179: break;
        case 97: 
          { return symbol(sym.UINT32);
          }
        case 180: break;
        case 98: 
          { return symbol(sym.PACKAGE);
          }
        case 181: break;
        case 96: 
          { return symbol(sym.UINT64);
          }
        case 182: break;
        case 71: 
          { return symbol(sym.AOAOEQ);
          }
        case 183: break;
        case 43: 
          { return symbol(sym.MINUSEQ);
          }
        case 184: break;
        case 20: 
          { return symbol(sym.CS);
          }
        case 185: break;
        case 44: 
          { return symbol(sym.MINUSMINUS);
          }
        case 186: break;
        case 102: 
          { return symbol(sym.DEFAULT);
          }
        case 187: break;
        case 6: 
          { return symbol(sym.DECIMAL_LITERAL,yytext());
          }
        case 188: break;
        case 86: 
          { return symbol(sym.CONST);
          }
        case 189: break;
        case 18: 
          { return symbol(sym.AO);
          }
        case 190: break;
        case 34: 
          { return symbol(sym.DIVEQ);
          }
        case 191: break;
        case 61: 
          { buff.append('\n');
          }
        case 192: break;
        case 9: 
          { return symbol(sym.SINGLEQUOTE);
          }
        case 193: break;
        case 23: 
          { return symbol(sym.BRACEO);
          }
        case 194: break;
        case 56: 
          { return symbol(sym.ACAC);
          }
        case 195: break;
        case 62: 
          { buff.append('\"');
          }
        case 196: break;
        case 106: 
          { return symbol(sym.COMPLEX128);
          }
        case 197: break;
        case 75: 
          { return symbol(sym.CHAN);
          }
        case 198: break;
        case 73: 
          { return symbol(sym.INT8);
          }
        case 199: break;
        case 10: 
          { return symbol(sym.EQ);
          }
        case 200: break;
        case 49: 
          { return symbol(sym.OREQ);
          }
        case 201: break;
        case 65: 
          { return symbol(sym.POINTPOINTPOINT);
          }
        case 202: break;
        case 108: 
          { return symbol(sym.BREAK);
          }
        case 203: break;
        case 67: 
          { return symbol(sym.FOR);
          }
        case 204: break;
        case 107: 
          { return symbol(sym.FALLTHROUGH);
          }
        case 205: break;
        case 60: 
          { buff.append('\r');
          }
        case 206: break;
        case 74: 
          { return symbol(sym.CASE);
          }
        case 207: break;
        case 101: 
          { return symbol(sym.FLOAT32);
          }
        case 208: break;
        case 54: 
          { return symbol(sym.CAPEQ);
          }
        case 209: break;
        case 4: 
          { return symbol(sym.TIME);
          }
        case 210: break;
        case 103: 
          { return symbol(sym.CONTINUE);
          }
        case 211: break;
        case 100: 
          { return symbol(sym.FLOAT64);
          }
        case 212: break;
        case 42: 
          { return symbol(sym.PLUSPLUS);
          }
        case 213: break;
        case 72: 
          { return symbol(sym.ACACEQ);
          }
        case 214: break;
        case 39: 
          { return symbol(sym.GO);
          }
        case 215: break;
        case 59: 
          { buff.append('\t');
          }
        case 216: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   
    switch(zzLexicalState) {
		case YYINITIAL:
		break;
		case COMMENT:
		yybegin(YYINITIAL);
		return symbol(sym.ERROR, "EOF in comment");
		case STRING:
		yybegin(YYINITIAL);
		return symbol(sym.ERROR, "EOF in string constant");
	}

	/*System.out.println("symTable:");
	Set<Integer> keys = Tables.symTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.symTable.get(key));
        }
	System.out.println("numTable:");
	keys = Tables.numTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.numTable.get(key));
        }
	System.out.println("stringTable:");
	keys = Tables.stringTable.keySet();
        for(Integer key: keys){
            System.out.println("Value of "+key+" is: "+Tables.stringTable.get(key));
        }*/
return symbol(sym.EOF);

 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
