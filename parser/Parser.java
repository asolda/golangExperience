
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 29 10:51:48 CEST 2016
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 29 10:51:48 CEST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\004\000\002\021" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\017\004\000\002\017\003\000\002\004\005\000" +
    "\002\004\007\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\006\000\002\006\006\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\056\006\001\002\000\004\002\117\001" +
    "\002\000\020\020\014\024\010\030\021\031\017\032\015" +
    "\033\023\062\016\001\002\000\004\030\007\001\002\000" +
    "\020\020\uffff\024\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\062\uffff\001\002\000\004\030\uffcf\001\002\000\022\002" +
    "\000\020\014\024\010\030\021\031\017\032\015\033\023" +
    "\062\016\001\002\000\004\030\114\001\002\000\024\002" +
    "\ufffe\020\ufffe\024\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\062\ufffe\125\ufffe\001\002\000\004\030\uffce\001\002\000" +
    "\004\030\uffd1\001\002\000\020\013\034\021\030\023\031" +
    "\025\032\030\052\040\042\041\035\001\002\000\004\030" +
    "\uffd2\001\002\000\024\002\ufffa\020\ufffa\024\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\062\ufffa\125\ufffa\001\002\000" +
    "\006\072\037\133\036\001\002\000\004\030\026\001\002" +
    "\000\004\030\uffd0\001\002\000\024\002\ufffc\020\ufffc\024" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\062\ufffc\125\ufffc" +
    "\001\002\000\024\002\ufffd\020\ufffd\024\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\062\ufffd\125\ufffd\001\002\000\026" +
    "\002\uffe2\020\uffe2\024\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\062\uffe2\125\uffe2\133\027\001\002\000\014\013\034" +
    "\021\030\023\031\025\032\041\035\001\002\000\046\002" +
    "\uffd7\020\uffd7\024\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\062\uffd7\073\uffd7\102\uffd7\103\uffd7\111\uffd7\112\uffd7\113" +
    "\uffd7\122\uffd7\123\uffd7\124\uffd7\125\uffd7\001\002\000\046" +
    "\002\uffd6\020\uffd6\024\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\062\uffd6\073\uffd6\102\uffd6\103\uffd6\111\uffd6\112\uffd6" +
    "\113\uffd6\122\uffd6\123\uffd6\124\uffd6\125\uffd6\001\002\000" +
    "\046\002\uffd4\020\uffd4\024\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\062\uffd4\073\uffd4\102\uffd4\103\uffd4\111\uffd4\112" +
    "\uffd4\113\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\001\002" +
    "\000\024\002\uffe0\020\uffe0\024\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\062\uffe0\125\uffe0\001\002\000\046\002\uffd5" +
    "\020\uffd5\024\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\062" +
    "\uffd5\073\uffd5\102\uffd5\103\uffd5\111\uffd5\112\uffd5\113\uffd5" +
    "\122\uffd5\123\uffd5\124\uffd5\125\uffd5\001\002\000\046\002" +
    "\uffd8\020\uffd8\024\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\062\uffd8\073\uffd8\102\uffd8\103\uffd8\111\uffd8\112\uffd8\113" +
    "\uffd8\122\uffd8\123\uffd8\124\uffd8\125\uffd8\001\002\000\020" +
    "\013\034\021\030\023\031\025\032\030\046\040\042\041" +
    "\035\001\002\000\020\013\034\021\030\023\031\025\032" +
    "\030\043\040\042\041\035\001\002\000\024\002\uffda\020" +
    "\uffda\024\uffda\030\uffda\031\uffda\032\uffda\033\uffda\062\uffda" +
    "\125\uffda\001\002\000\024\002\uffdb\020\uffdb\024\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\062\uffdb\125\uffdb\001\002" +
    "\000\046\002\uffd3\020\uffd3\024\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\062\uffd3\073\uffd3\102\uffd3\103\uffd3\111\uffd3" +
    "\112\uffd3\113\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3\001" +
    "\002\000\024\002\uffd9\020\uffd9\024\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\062\uffd9\125\uffd9\001\002\000\024\002" +
    "\uffdd\020\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\062\uffdd\125\uffdd\001\002\000\024\002\uffde\020\uffde\024" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\062\uffde\125\uffde" +
    "\001\002\000\024\002\uffdc\020\uffdc\024\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\062\uffdc\125\uffdc\001\002\000\022" +
    "\073\072\102\074\103\075\111\073\112\102\113\077\122" +
    "\076\123\100\001\002\000\022\073\072\102\074\103\075" +
    "\111\073\112\102\113\077\122\076\123\100\001\002\000" +
    "\010\102\ufff5\111\ufff5\124\ufff5\001\002\000\022\073\072" +
    "\102\074\103\075\111\073\112\102\113\077\122\076\123" +
    "\100\001\002\000\010\102\055\111\056\124\057\001\002" +
    "\000\026\002\ufff9\020\ufff9\024\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\054\070\062\ufff9\125\ufff9\001\002\000\020" +
    "\013\034\021\030\023\031\025\032\030\052\040\042\041" +
    "\035\001\002\000\020\013\034\021\030\023\031\025\032" +
    "\030\052\040\042\041\035\001\002\000\024\020\014\024" +
    "\010\030\021\031\017\032\015\033\023\062\016\124\057" +
    "\125\062\001\002\000\022\020\014\024\010\030\021\031" +
    "\017\032\015\033\023\062\016\125\064\001\002\000\004" +
    "\125\063\001\002\000\026\002\uffe3\020\uffe3\024\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\054\uffe3\062\uffe3\125\uffe3" +
    "\001\002\000\026\002\uffe5\020\uffe5\024\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\054\uffe5\062\uffe5\125\uffe5\001\002" +
    "\000\026\002\uffe4\020\uffe4\024\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\054\uffe4\062\uffe4\125\uffe4\001\002\000\024" +
    "\002\ufffb\020\ufffb\024\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\062\ufffb\125\ufffb\001\002\000\010\102\ufff7\111\ufff7" +
    "\124\ufff7\001\002\000\010\102\ufff6\111\ufff6\124\ufff6\001" +
    "\002\000\004\124\057\001\002\000\024\002\ufff8\020\ufff8" +
    "\024\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\062\ufff8\125" +
    "\ufff8\001\002\000\020\013\uffec\021\uffec\023\uffec\025\uffec" +
    "\030\uffec\040\uffec\041\uffec\001\002\000\020\013\uffed\021" +
    "\uffed\023\uffed\025\uffed\030\uffed\040\uffed\041\uffed\001\002" +
    "\000\020\013\uffea\021\uffea\023\uffea\025\uffea\030\uffea\040" +
    "\uffea\041\uffea\001\002\000\020\013\uffeb\021\uffeb\023\uffeb" +
    "\025\uffeb\030\uffeb\040\uffeb\041\uffeb\001\002\000\020\013" +
    "\uffe8\021\uffe8\023\uffe8\025\uffe8\030\uffe8\040\uffe8\041\uffe8" +
    "\001\002\000\020\013\uffe6\021\uffe6\023\uffe6\025\uffe6\030" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\020\013\uffe9\021\uffe9" +
    "\023\uffe9\025\uffe9\030\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\020\013\034\021\030\023\031\025\032\030\105\040\042" +
    "\041\035\001\002\000\020\013\uffe7\021\uffe7\023\uffe7\025" +
    "\uffe7\030\uffe7\040\uffe7\041\uffe7\001\002\000\010\102\ufff1" +
    "\111\ufff1\124\ufff1\001\002\000\010\102\ufff3\111\ufff3\124" +
    "\ufff3\001\002\000\010\102\ufff4\111\ufff4\124\ufff4\001\002" +
    "\000\016\013\034\021\030\023\031\025\032\030\107\041" +
    "\035\001\002\000\010\102\ufff2\111\ufff2\124\ufff2\001\002" +
    "\000\010\102\uffef\111\uffef\124\uffef\001\002\000\006\030" +
    "\113\040\042\001\002\000\010\102\uffee\111\uffee\124\uffee" +
    "\001\002\000\010\102\ufff0\111\ufff0\124\ufff0\001\002\000" +
    "\026\002\uffe1\020\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\062\uffe1\125\uffe1\133\115\001\002\000\004\040" +
    "\042\001\002\000\024\002\uffdf\020\uffdf\024\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\062\uffdf\125\uffdf\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\006\002\003\021\004\001\001\000\002\001" +
    "\001\000\020\004\023\005\017\006\012\007\024\012\021" +
    "\013\011\017\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\023\005\064\006\012" +
    "\007\024\012\021\013\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\047\011\046\014\050\016\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\044\011\043" +
    "\001\001\000\006\010\040\011\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\110\001\001\000\004\003\105\001\001\000\002" +
    "\001\001\000\004\003\100\001\001\000\004\015\053\001" +
    "\001\000\002\001\001\000\010\010\047\011\046\014\066" +
    "\001\001\000\010\010\047\011\046\014\065\001\001\000" +
    "\022\004\023\005\017\006\012\007\024\012\021\013\011" +
    "\015\060\017\057\001\001\000\016\004\023\005\064\006" +
    "\012\007\024\012\021\013\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\103\011\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\115\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at "+cur_token);
    }
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }

    public static void main(String args[]) {
	try {
	    Lexer lexer = new Lexer(new FileReader(args[0]));
	    // start parsing
	    Parser p = new Parser(lexer);
	    System.out.println("Parser runs: ");
            newScope();
            p.parse();
	    System.out.println("Parsing finished!");
	} catch (Exception e) {
	    e.printStackTrace();
	} 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_def_string ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_string",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_def_numeric ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_def_numeric ::= UINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_def_numeric ::= INT64 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_def_numeric ::= INT32 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value_string ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_string",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_numeric ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value_numeric ::= OCTAL_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value_numeric ::= DECIMAL_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value_numeric ::= HEX_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value_numeric ::= IMAGINARY_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment_statement ::= IDENTIFIER EQ IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("assignment"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment_statement ::= IDENTIFIER EQ value_string 
            {
              Object RESULT =null;
		 System.out.println("assignment string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment_statement ::= IDENTIFIER EQ value_numeric 
            {
              Object RESULT =null;
		 System.out.println("assignment numeric"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment_statement ::= IDENTIFIER TPEQ IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("assignment"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment_statement ::= IDENTIFIER TPEQ value_string 
            {
              Object RESULT =null;
		 System.out.println("assignment string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment_statement ::= IDENTIFIER TPEQ value_numeric 
            {
              Object RESULT =null;
		 System.out.println("assignment numeric"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration_statement ::= type_def_string IDENTIFIER TPEQ value_string 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("declaration + initialization string "+i+"="+v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration_statement ::= type_def_numeric IDENTIFIER TPEQ value_numeric 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("declaration + initialization numeric  "+i+"="+v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_statement ::= type_def_string IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("declaration string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_statement ::= type_def_numeric IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("declaration numeric"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // body ::= BRACEO BRACEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // body ::= BRACEO composit_statement BRACEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // body ::= BRACEO body BRACEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logic_operator ::= AOEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logic_operator ::= AO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logic_operator ::= AC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logic_operator ::= ACEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logic_operator ::= ANDAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logic_operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logic_operator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // logic_operator ::= OROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condition ::= value_string logic_operator value_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= value_numeric logic_operator value_numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= value_string logic_operator IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition ::= IDENTIFIER logic_operator value_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condition ::= value_numeric logic_operator IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condition ::= IDENTIFIER logic_operator value_numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condition ::= IDENTIFIER logic_operator IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // composit_condition ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_condition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // composit_condition ::= composit_condition ANDAND condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_condition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // composit_condition ::= composit_condition OROR condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_condition",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // if_statement ::= IF composit_condition body ELSE body 
            {
              Object RESULT =null;
		 System.out.println("IF+ELSE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // if_statement ::= IF composit_condition body 
            {
              Object RESULT =null;
		 System.out.println("IF"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // composit_statement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // composit_statement ::= composit_statement statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= declaration_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // package_statement ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("Package"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= package_statement composit_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

