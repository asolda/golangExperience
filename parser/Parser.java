
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 13 16:01:34 CEST 2016
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 13 16:01:34 CEST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\024" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\022\004\000\002\022\003\000" +
    "\002\005\005\000\002\025\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\010\005\000\002\010\005\000\002\012\005\000\002\012" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\056\006\001\002\000\004\002\127\001" +
    "\002\000\024\020\014\024\010\030\023\031\020\032\016" +
    "\033\025\044\021\045\015\062\017\001\002\000\004\030" +
    "\007\001\002\000\024\020\uffff\024\uffff\030\uffff\031\uffff" +
    "\032\uffff\033\uffff\044\uffff\045\uffff\062\uffff\001\002\000" +
    "\004\030\uffcb\001\002\000\004\002\000\001\002\000\030" +
    "\002\ufffe\020\ufffe\024\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\044\ufffe\045\ufffe\062\ufffe\125\ufffe\001\002\000\004" +
    "\030\123\001\002\000\004\030\uffc8\001\002\000\004\030" +
    "\uffc9\001\002\000\004\030\uffcd\001\002\000\020\013\051" +
    "\021\044\023\045\025\046\030\064\040\056\041\052\001" +
    "\002\000\004\030\uffce\001\002\000\004\030\uffca\001\002" +
    "\000\030\002\ufff9\020\014\024\010\030\023\031\020\032" +
    "\016\033\025\044\021\045\015\062\017\125\ufff9\001\002" +
    "\000\004\072\053\001\002\000\004\030\041\001\002\000" +
    "\004\030\uffcc\001\002\000\032\002\ufffc\020\ufffc\024\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\044\ufffc\045\ufffc\054" +
    "\030\062\ufffc\125\ufffc\001\002\000\030\002\ufffd\020\ufffd" +
    "\024\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\044\ufffd\045" +
    "\ufffd\062\ufffd\125\ufffd\001\002\000\004\124\033\001\002" +
    "\000\030\002\ufffb\020\ufffb\024\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\044\ufffb\045\ufffb\062\ufffb\125\ufffb\001\002" +
    "\000\030\002\ufff7\020\ufff7\024\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\044\ufff7\045\ufff7\062\ufff7\125\ufff7\001\002" +
    "\000\030\020\014\024\010\030\023\031\020\032\016\033" +
    "\025\044\021\045\015\062\017\124\033\125\036\001\002" +
    "\000\004\125\040\001\002\000\004\125\037\001\002\000" +
    "\032\002\uffe0\020\uffe0\024\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\044\uffe0\045\uffe0\054\uffe0\062\uffe0\125\uffe0\001" +
    "\002\000\032\002\uffe1\020\uffe1\024\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\044\uffe1\045\uffe1\054\uffe1\062\uffe1\125" +
    "\uffe1\001\002\000\032\002\uffe2\020\uffe2\024\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\044\uffe2\045\uffe2\054\uffe2\062" +
    "\uffe2\125\uffe2\001\002\000\032\002\uffdf\020\uffdf\024\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\044\uffdf\045\uffdf\062" +
    "\uffdf\125\uffdf\133\043\001\002\000\030\002\uffdd\020\uffdd" +
    "\024\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\044\uffdd\045" +
    "\uffdd\062\uffdd\125\uffdd\001\002\000\016\013\051\021\044" +
    "\023\045\025\046\030\050\041\052\001\002\000\052\002" +
    "\uffd3\020\uffd3\024\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\044\uffd3\045\uffd3\062\uffd3\073\uffd3\102\uffd3\103\uffd3\111" +
    "\uffd3\112\uffd3\113\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3" +
    "\001\002\000\052\002\uffd2\020\uffd2\024\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\044\uffd2\045\uffd2\062\uffd2\073\uffd2" +
    "\102\uffd2\103\uffd2\111\uffd2\112\uffd2\113\uffd2\122\uffd2\123" +
    "\uffd2\124\uffd2\125\uffd2\001\002\000\052\002\uffd0\020\uffd0" +
    "\024\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\044\uffd0\045" +
    "\uffd0\062\uffd0\073\uffd0\102\uffd0\103\uffd0\111\uffd0\112\uffd0" +
    "\113\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\001\002\000" +
    "\030\002\uffdb\020\uffdb\024\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\044\uffdb\045\uffdb\062\uffdb\125\uffdb\001\002\000" +
    "\030\002\uffda\020\uffda\024\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\044\uffda\045\uffda\062\uffda\125\uffda\001\002\000" +
    "\052\002\uffd1\020\uffd1\024\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\044\uffd1\045\uffd1\062\uffd1\073\uffd1\102\uffd1\103" +
    "\uffd1\111\uffd1\112\uffd1\113\uffd1\122\uffd1\123\uffd1\124\uffd1" +
    "\125\uffd1\001\002\000\052\002\uffd4\020\uffd4\024\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\044\uffd4\045\uffd4\062\uffd4" +
    "\073\uffd4\102\uffd4\103\uffd4\111\uffd4\112\uffd4\113\uffd4\122" +
    "\uffd4\123\uffd4\124\uffd4\125\uffd4\001\002\000\020\013\051" +
    "\021\044\023\045\025\046\030\057\040\056\041\052\001" +
    "\002\000\030\002\uffd7\020\uffd7\024\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\044\uffd7\045\uffd7\062\uffd7\125\uffd7\001" +
    "\002\000\030\002\uffd6\020\uffd6\024\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\044\uffd6\045\uffd6\062\uffd6\125\uffd6\001" +
    "\002\000\042\002\uffcf\020\uffcf\024\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\044\uffcf\045\uffcf\062\uffcf\073\uffcf\102" +
    "\uffcf\103\uffcf\111\uffcf\124\uffcf\125\uffcf\001\002\000\030" +
    "\002\uffd5\020\uffd5\024\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\044\uffd5\045\uffd5\062\uffd5\125\uffd5\001\002\000\006" +
    "\002\ufffa\125\ufffa\001\002\000\006\073\117\103\116\001" +
    "\002\000\022\073\110\102\075\103\111\111\074\112\104" +
    "\113\101\122\077\123\102\001\002\000\010\102\ufff4\111" +
    "\ufff4\124\ufff4\001\002\000\022\073\073\102\075\103\076" +
    "\111\074\112\104\113\101\122\077\123\102\001\002\000" +
    "\010\102\067\111\070\124\033\001\002\000\032\002\ufff8" +
    "\020\ufff8\024\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\044" +
    "\ufff8\045\ufff8\054\ufff8\062\ufff8\125\ufff8\001\002\000\020" +
    "\013\051\021\044\023\045\025\046\030\064\040\056\041" +
    "\052\001\002\000\020\013\051\021\044\023\045\025\046" +
    "\030\064\040\056\041\052\001\002\000\010\102\ufff6\111" +
    "\ufff6\124\ufff6\001\002\000\010\102\ufff5\111\ufff5\124\ufff5" +
    "\001\002\000\020\013\uffeb\021\uffeb\023\uffeb\025\uffeb\030" +
    "\uffeb\040\uffe4\041\uffeb\001\002\000\016\013\uffec\021\uffec" +
    "\023\uffec\025\uffec\030\uffec\041\uffec\001\002\000\016\013" +
    "\uffe9\021\uffe9\023\uffe9\025\uffe9\030\uffe9\041\uffe9\001\002" +
    "\000\020\013\uffea\021\uffea\023\uffea\025\uffea\030\uffea\040" +
    "\uffe3\041\uffea\001\002\000\016\013\uffe7\021\uffe7\023\uffe7" +
    "\025\uffe7\030\uffe7\041\uffe7\001\002\000\004\040\056\001" +
    "\002\000\016\013\uffe5\021\uffe5\023\uffe5\025\uffe5\030\uffe5" +
    "\041\uffe5\001\002\000\016\013\uffe8\021\uffe8\023\uffe8\025" +
    "\uffe8\030\uffe8\041\uffe8\001\002\000\016\013\051\021\044" +
    "\023\045\025\046\030\105\041\052\001\002\000\016\013" +
    "\uffe6\021\uffe6\023\uffe6\025\uffe6\030\uffe6\041\uffe6\001\002" +
    "\000\010\102\ufff3\111\ufff3\124\ufff3\001\002\000\010\102" +
    "\ufff2\111\ufff2\124\ufff2\001\002\000\010\102\ufff0\111\ufff0" +
    "\124\ufff0\001\002\000\016\013\uffeb\021\uffeb\023\uffeb\025" +
    "\uffeb\030\uffeb\041\uffeb\001\002\000\016\013\uffea\021\uffea" +
    "\023\uffea\025\uffea\030\uffea\041\uffea\001\002\000\016\013" +
    "\051\021\044\023\045\025\046\030\113\041\052\001\002" +
    "\000\010\102\ufff1\111\ufff1\124\ufff1\001\002\000\010\102" +
    "\uffee\111\uffee\124\uffee\001\002\000\006\030\121\040\056" +
    "\001\002\000\006\030\uffe3\040\uffe3\001\002\000\006\030" +
    "\uffe4\040\uffe4\001\002\000\010\102\uffed\111\uffed\124\uffed" +
    "\001\002\000\010\102\uffef\111\uffef\124\uffef\001\002\000" +
    "\030\002\uffdc\020\uffdc\024\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\044\uffdc\045\uffdc\062\uffdc\125\uffdc\001\002\000" +
    "\032\002\uffde\020\uffde\024\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\044\uffde\045\uffde\062\uffde\125\uffde\133\124\001" +
    "\002\000\006\030\125\040\056\001\002\000\030\002\uffd8" +
    "\020\uffd8\024\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\044" +
    "\uffd8\045\uffd8\062\uffd8\125\uffd8\001\002\000\030\002\uffd9" +
    "\020\uffd9\024\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\044" +
    "\uffd9\045\uffd9\062\uffd9\125\uffd9\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\002\003\024\004\001\001\000\002\001" +
    "\001\000\020\005\025\006\021\007\011\011\026\015\023" +
    "\016\012\022\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\061\014\060\017\062" +
    "\021\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\025\006\021\007\011\011\026\015\023\016\012" +
    "\022\057\001\001\000\002\001\001\000\004\010\041\001" +
    "\001\000\002\001\001\000\004\025\030\001\001\000\002" +
    "\001\001\000\004\020\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\025\006\021\007\011\011\026" +
    "\015\023\016\012\020\033\022\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\054\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\114" +
    "\001\001\000\004\003\111\001\001\000\002\001\001\000" +
    "\006\003\102\004\077\001\001\000\004\020\065\001\001" +
    "\000\002\001\001\000\010\013\061\014\060\017\071\001" +
    "\001\000\010\013\061\014\060\017\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at "+cur_token);
    }
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }

    public static void visita(Node<String> n){
	if(n.getChildren().size()==0){
		System.out.println(n.getData());
		return;
	}
	for(int i=0;i<n.getChildren().size();i++){
		visita(n.getChildren().get(i));
	}
	System.out.println(n.getData());
    }

    public static void main(String args[]) {
	try {
	    Lexer lexer = new Lexer(new FileReader(args[0]));
	    // start parsing
	    Parser p = new Parser(lexer);
	    System.out.println("Parser runs: ");
            newScope();
		
            p.parse();

	
	    System.out.println("Parsing finished!");
	} catch (Exception e) {
	    e.printStackTrace();
	} 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_def_string ::= STRING 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("STRING"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_string",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_def_numeric ::= FLOAT64 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("FLOAT64"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_def_numeric ::= FLOAT32 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("FLOAT32"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_def_numeric ::= INT 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("INT"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_def_numeric ::= UINT 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("UNIT"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_def_numeric ::= INT64 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("INT64"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_def_numeric ::= INT32 
            {
              Object RESULT =null;
		 Node<String> node = new Node<String>("INT32"); RESULT=node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_numeric",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value_string ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value_numeric ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String si= (String) v;  RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value_numeric ::= OCTAL_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String si= (String) v;  RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value_numeric ::= DECIMAL_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String si= (String) v;  RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value_numeric ::= HEX_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String si= (String) v;  RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_numeric ::= IMAGINARY_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String si= (String) v;  RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_numeric",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignment_statement ::= IDENTIFIER EQ IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String ident1= (String) id1;
		String ident2 = (String) id2;
		Node<String> identifier1 = new Node<String>("Identifier"); 
		Node<String> identifier2 = new Node<String>("Identifier"); 
		Node<String> ident_v1= new Node<String>(ident1);
		Node<String> ident_v2 = new Node<String> (ident2);
		identifier1.addChild(ident_v1,identifier1);
		identifier2.addChild(ident_v2,identifier2);
		Node<String> ass_op = new Node<String>("assignment_op");
		ass_op.addChild(identifier1,ass_op);
		ass_op.addChild(identifier2,ass_op);
		RESULT = ass_op;
		
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment_statement ::= IDENTIFIER EQ value_numeric 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String ident= (String) ide;
		String valore = val.toString();
		Node<String> identifier = new Node<String>("Identifier"); 
		Node<String> ident_v= new Node<String>(ident);
		Node<String> value = new Node<String> (valore);
		identifier.addChild(ident_v,identifier);
		Node<String> ass_op = new Node<String>("assignment_op");
		ass_op.addChild(identifier,ass_op);
		ass_op.addChild(value,ass_op);
		RESULT = ass_op;
		
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment_statement ::= IDENTIFIER EQ value_string 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String ident= (String) ide;
		String valore = val.toString();
		Node<String> identifier = new Node<String>("Identifier"); 
		Node<String> ident_v= new Node<String>(ident);
		Node<String> value = new Node<String> (valore);
		identifier.addChild(ident_v,identifier);
		Node<String> ass_op = new Node<String>("assignment_op");
		ass_op.addChild(identifier,ass_op);
		ass_op.addChild(value,ass_op);
		RESULT = ass_op;
		
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // initialization_statement_string ::= IDENTIFIER TPEQ IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		String ident1= (String) id1;
		String ident2 = (String) id2;
		Node<String> identifier1 = new Node<String>("Identifier"); 
		Node<String> identifier2 = new Node<String>("Identifier"); 
		Node<String> ident_v1= new Node<String>(ident1);
		Node<String> ident_v2 = new Node<String> (ident2);
		identifier1.addChild(ident_v1,identifier1);
		identifier2.addChild(ident_v2,identifier2);
		Node<String> ass_op = new Node<String>("initialization_op");
		ass_op.addChild(identifier1,ass_op);
		ass_op.addChild(identifier2,ass_op);
		RESULT = ass_op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization_statement_string",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // initialization_statement_string ::= IDENTIFIER TPEQ value_string 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String ident= (String) ide;
		String valore = val.toString();
		Node<String> identifier = new Node<String>("Identifier"); 
		Node<String> ident_v= new Node<String>(ident);
		Node<String> value = new Node<String> (valore);
		identifier.addChild(ident_v,identifier);
		Node<String> ass_op = new Node<String>("initialization_op");
		ass_op.addChild(identifier,ass_op);
		ass_op.addChild(value,ass_op);
		RESULT = ass_op;
		
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization_statement_string",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // initialization_statement_numeric ::= IDENTIFIER TPEQ IDENTIFIER 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		String ident1= (String) id1;
		String ident2 = (String) id2;
		Node<String> identifier1 = new Node<String>("Identifier"); 
		Node<String> identifier2 = new Node<String>("Identifier"); 
		Node<String> ident_v1= new Node<String>(ident1);
		Node<String> ident_v2 = new Node<String> (ident2);
		identifier1.addChild(ident_v1,identifier1);
		identifier2.addChild(ident_v2,identifier2);
		Node<String> ass_op = new Node<String>("initialization_op");
		ass_op.addChild(identifier1,ass_op);
		ass_op.addChild(identifier2,ass_op);
		RESULT = ass_op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization_statement_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // initialization_statement_numeric ::= IDENTIFIER TPEQ value_numeric 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String ident= (String) ide;
		String valore = (String) val;
		Node<String> identifier = new Node<String>("Identifier"); 
		Node<String> ident_v= new Node<String>(ident);
		Node<String> value = new Node<String> (valore);
		identifier.addChild(ident_v,identifier);
		Node<String> ass_op = new Node<String>("initialization_op");
		ass_op.addChild(identifier,ass_op);
		ass_op.addChild(value,ass_op);
		RESULT = ass_op;
		
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization_statement_numeric",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaration_statement ::= type_def_string initialization_statement_string 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int anleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object an = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
		Node<String> type = (Node<String>) tipo; 
		Node<String> ass = (Node<String>) an;
		Node<String> declaration = new Node<String> ("Declaration");
		declaration.addChild(type,declaration);
		declaration.addChild(ass,declaration);
		RESULT=declaration; 
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration_statement ::= type_def_numeric initialization_statement_numeric 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int anleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object an = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
		Node<String> type = (Node<String>) tipo; 
		Node<String> ass = (Node<String>) an;
		Node<String> declaration = new Node<String> ("Declaration");
		declaration.addChild(type,declaration);
		declaration.addChild(ass,declaration);
		RESULT=declaration; 
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration_statement ::= type_def_string IDENTIFIER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String value = (String) v; 
		Node<String> type = (Node<String>) tipo;
		Node<String> nodo = new Node<String>(value); 
		Node<String> declaration = new Node<String> ("Declaration");
		Node<String> identifier = new Node<String> ("Identifier");
		identifier.addChild(nodo,identifier);
		declaration.addChild(type,declaration);
		declaration.addChild(identifier,declaration);
                
		RESULT=declaration;
		 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration_statement ::= type_def_numeric IDENTIFIER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		String value = (String) v; 
		Node<String> type = (Node<String>) tipo;
		Node<String> nodo = new Node<String>(value); 
		Node<String> declaration = new Node<String> ("Declaration");
		Node<String> identifier = new Node<String> ("Identifier");
		identifier.addChild(nodo,identifier);
		declaration.addChild(type,declaration);
		declaration.addChild(identifier,declaration);
		RESULT=declaration;
		 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // body ::= BRACEO BRACEC 
            {
              Object RESULT =null;
		 Node<String> body =new Node<String>("body"); RESULT=body; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // body ::= BRACEO composit_statement BRACEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			Node<String> body = new Node<String> ("body"); 
			ArrayList<Node<String>> list = (ArrayList<Node<String>>) lista; 
			for(int i=0;i<list.size();i++){
				body.addChild(list.get(i),body);
			}
			RESULT = body; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // body ::= BRACEO body BRACEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			Node<String> body = new Node<String> ("body"); 
			ArrayList<Node<String>> list = (ArrayList<Node<String>>) lista; 
			for(int i=0;i<list.size();i++){
				body.addChild(list.get(i),body);
			}
			RESULT = body; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logic_operator_string ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator_string",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logic_operator_string ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator_string",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logic_operator ::= AOEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logic_operator ::= AO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logic_operator ::= AC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logic_operator ::= ACEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logic_operator ::= ANDAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logic_operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logic_operator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logic_operator ::= OROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condition ::= value_string logic_operator_string value_string 
            {
              Object RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> val1 = new Node<String>(value1.toString());
		Node<String> val2 = new Node<String>(value2.toString());
		op.addChild(val1,op);
		op.addChild(val2,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condition ::= value_numeric logic_operator value_numeric 
            {
              Object RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> val1 = new Node<String>((String) value1);
		Node<String> val2 = new Node<String>((String) value2);		
		op.addChild(val1,op);
		op.addChild(val2,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= value_string logic_operator_string IDENTIFIER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> id1 = new Node<String>((String) i1);
		Node<String> val = new Node<String>(value.toString());
		op.addChild(val,op);
		op.addChild(id1,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= IDENTIFIER logic_operator_string value_string 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> id1 = new Node<String>((String) i1);
		Node<String> val = new Node<String>(value.toString());
		op.addChild(id1,op);
		op.addChild(val,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition ::= value_numeric logic_operator IDENTIFIER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> id1 = new Node<String>((String) i1);
		Node<String> val = new Node<String>((String) value);
		op.addChild(val,op);
		op.addChild(id1,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condition ::= IDENTIFIER logic_operator value_numeric 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> id1 = new Node<String>((String) i1);
		Node<String> val = new Node<String>((String) value);
		op.addChild(id1,op);
		op.addChild(val,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condition ::= IDENTIFIER logic_operator IDENTIFIER 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> cond = new Node<String>("condition");
		Node<String> op = new Node<String>("logic_operator");
		Node<String> id1 = new Node<String>((String) i1);
		Node<String> id2 = new Node<String>((String) i2);
		op.addChild(id1,op);
		op.addChild(id2,op);
		cond.addChild(op,cond);
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		list.add(cond);
		RESULT = list;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // composit_condition ::= condition 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		ArrayList<Node<String>> list = new ArrayList<Node<String>>();
		ArrayList<Node<String>> con= (ArrayList<Node<String>>) v;
		list.add(con.get(0));
		RESULT= list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // composit_condition ::= composit_condition ANDAND condition 
            {
              Object RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Node<String> op = new Node<String>("AND");
		ArrayList<Node<String>> lista = new ArrayList<Node<String>>();
		ArrayList<Node<String>> lista1 = (ArrayList<Node<String>>) list1;
		ArrayList<Node<String>> lista2 = (ArrayList<Node<String>>) list2;
		for (int i=0;i<lista1.size();i++){
			lista.add(lista1.get(i));
		}
		lista.add(op);
		lista.add(lista2.get(0));
		RESULT=lista;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // composit_condition ::= composit_condition OROR condition 
            {
              Object RESULT =null;
		int list1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Node<String> op = new Node<String>("OR");
		ArrayList<Node<String>> lista = new ArrayList<Node<String>>();
		ArrayList<Node<String>> lista1 = (ArrayList<Node<String>>) list1;
		ArrayList<Node<String>> lista2 = (ArrayList<Node<String>>) list2;
		for (int i=0;i<lista1.size();i++){
			lista.add(lista1.get(i));
		}
		lista.add(op);
		lista.add(lista2.get(0));
		RESULT=lista;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_condition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // else_statement ::= ELSE body 
            {
              Object RESULT =null;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> nodo = new Node<String>("else");
		nodo.addChild((Node<String>) bn,nodo);
		RESULT = nodo;

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // if_statement ::= IF composit_condition body 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		Node<String> nodo = new Node<String>("if");
		ArrayList<Node<String>> lista = (ArrayList<Node<String>>) cond;
		for(int i=0;i<lista.size();i++){
			nodo.addChild(lista.get(i),nodo);
		}
		nodo.addChild((Node<String>) bn,nodo);
		RESULT = nodo;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // composit_statement ::= statement 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Node<String> node = (Node<String>) n; 
		ArrayList<Node<String>> ll = new ArrayList<Node<String>>();   
		ll.add(node);
		RESULT=ll;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // composit_statement ::= statement composit_statement 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	ArrayList<Node<String>> completeList = new ArrayList<Node<String>>();
	Node<String> node = (Node<String>) n;
	ArrayList<Node<String>> new_cl = (ArrayList<Node<String>>) cl;
	for (int i=0;i<new_cl.size();i++){
	completeList.add(new_cl.get(i));
	}
	completeList.add(node);
	
 	RESULT=completeList; 
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("composit_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if_statement else_statement 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elsenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elsen = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Node<String> ifElseNode = new Node<String>("if-else");
						Node<String> ifnode= (Node<String>) ifn;
						Node<String> elsenode= (Node<String>) elsen;
						ifElseNode.addChild(ifnode,ifElseNode);
						ifElseNode.addChild(elsenode,ifElseNode);
						 RESULT = ifElseNode;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= if_statement 
            {
              Object RESULT =null;
		int ifnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node<String> ifnode= (Node<String>) ifn; RESULT=ifnode; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= assignment_statement 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = (Node<String>) node; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= declaration_statement 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node<String> dn = (Node<String>) node; RESULT = dn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // package_statement ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node<String> pack=new Node<String>("package"); Node<String> identifier =new Node<String>("Identifier"); String value = (String) v; identifier.addChild(value,identifier); pack.addChild(identifier,pack); RESULT=pack;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= package_statement composit_statement 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	Node<String> radice = new Node<String>("Program"); 
	Node<String> pr = (Node<String>) p; radice.addChild(pr,radice);   
	ArrayList<Node<String>> l = (ArrayList<Node<String>>) lista;
	for(int i=0;i<l.size();i++){ 
		radice.addChild(l.get(i),radice);
	}
	System.out.println("------------------------------------");
        
        radice.visita(radice);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

